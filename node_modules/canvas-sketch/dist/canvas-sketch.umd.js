(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('is-dom'), require('dateformat'), require('object-assign'), require('pad-left'), require('convert-units'), require('defined'), require('get-canvas-context'), require('right-now'), require('is-promise'), require('deep-equal')) :
  typeof define === 'function' && define.amd ? define(['is-dom', 'dateformat', 'object-assign', 'pad-left', 'convert-units', 'defined', 'get-canvas-context', 'right-now', 'is-promise', 'deep-equal'], factory) :
  (global.canvasSketch = factory(null,global.dateformat,null,null,null,global.defined,null,null,null,null));
}(this, (function (isDOM,dateformat,assign,padLeft,convertUnits,defined,getCanvasContext,rightNow,isPromise,deepEqual) {

  isDOM = isDOM && isDOM.hasOwnProperty('default') ? isDOM['default'] : isDOM;
  dateformat = dateformat && dateformat.hasOwnProperty('default') ? dateformat['default'] : dateformat;
  assign = assign && assign.hasOwnProperty('default') ? assign['default'] : assign;
  padLeft = padLeft && padLeft.hasOwnProperty('default') ? padLeft['default'] : padLeft;
  convertUnits = convertUnits && convertUnits.hasOwnProperty('default') ? convertUnits['default'] : convertUnits;
  defined = defined && defined.hasOwnProperty('default') ? defined['default'] : defined;
  getCanvasContext = getCanvasContext && getCanvasContext.hasOwnProperty('default') ? getCanvasContext['default'] : getCanvasContext;
  rightNow = rightNow && rightNow.hasOwnProperty('default') ? rightNow['default'] : rightNow;
  isPromise = isPromise && isPromise.hasOwnProperty('default') ? isPromise['default'] : isPromise;
  deepEqual = deepEqual && deepEqual.hasOwnProperty('default') ? deepEqual['default'] : deepEqual;

  function getClientAPI() {
      return typeof window !== 'undefined' && window['canvas-sketch-cli'];
  }

  function isBrowser() {
      return typeof document !== 'undefined';
  }

  function isWebGLContext(ctx) {
      return typeof ctx.clear === 'function' && typeof ctx.clearColor === 'function' && typeof ctx.bufferData === 'function';
  }

  function isCanvas(element) {
      return isDOM(element) && /canvas/i.test(element.nodeName) && typeof element.getContext === 'function';
  }

  var noop = function () {};
  var link;
  function saveDataURL(dataURI, opts) {
      if ( opts === void 0 ) opts = {};

      return window.fetch(dataURI).then(function (res) { return res.blob(); }).then(function (blob) { return saveBlob(blob, opts); });
  }

  function saveBlob(blob, opts) {
      if ( opts === void 0 ) opts = {};

      return new Promise(function (resolve) {
          opts = assign({
              extension: '',
              prefix: '',
              suffix: ''
          }, opts);
          var filename = resolveFilename(opts);
          var client = getClientAPI();
          if (client && typeof client.saveBlob === 'function' && client.output) {
              return client.saveBlob(blob, assign({}, opts, {
                  filename: filename
              })).then(function (ev) { return resolve(ev); });
          } else {
              if (!link) 
                  { link = document.createElement('a'); }
              link.download = filename;
              link.href = window.URL.createObjectURL(blob);
              link.onclick = (function () {
                  link.onclick = noop;
                  setTimeout(function () {
                      window.URL.revokeObjectURL(blob);
                      link.removeAttribute('href');
                      resolve({
                          filename: filename,
                          client: false
                      });
                  });
              });
              link.click();
          }
      });
  }

  function saveFile(data, opts) {
      if ( opts === void 0 ) opts = {};

      var parts = Array.isArray(data) ? data : [data];
      var blob = new window.Blob(parts, {
          type: opts.type || ''
      });
      return saveBlob(blob, opts);
  }

  function getFileName() {
      var dateFormatStr = "yyyy.mm.dd-HH.MM.ss";
      return dateformat(new Date(), dateFormatStr);
  }

  function resolveFilename(opt) {
      if ( opt === void 0 ) opt = {};

      opt = assign({}, opt);
      if (typeof opt.file === 'function') {
          return opt.file(opt);
      } else if (opt.file) {
          return opt.file;
      }
      var frame = null;
      var extension = '';
      if (typeof opt.extension === 'string') 
          { extension = opt.extension; }
      if (typeof opt.frame === 'number') {
          var totalFrames;
          if (typeof opt.totalFrames === 'number') {
              totalFrames = opt.totalFrames;
          } else {
              totalFrames = Math.max(1000, opt.frame);
          }
          frame = padLeft(String(opt.frame), String(totalFrames).length, '0');
      }
      var layerStr = isFinite(opt.totalLayers) && isFinite(opt.layer) && opt.totalLayers > 1 ? ("" + (opt.layer)) : '';
      if (frame != null) {
          return [layerStr,frame].filter(Boolean).join('-') + extension;
      } else {
          var defaultFileName = opt.timeStamp;
          return [opt.prefix,opt.name || defaultFileName,layerStr,opt.hash,opt.suffix].filter(Boolean).join('-') + extension;
      }
  }

  function keyboardShortcuts (opt) {
      if ( opt === void 0 ) opt = {};

      var handler = function (ev) {
          if (!opt.enabled()) 
              { return; }
          var client = getClientAPI();
          if (ev.keyCode === 83 && !ev.altKey && (ev.metaKey || ev.ctrlKey)) {
              ev.preventDefault();
              opt.save(ev);
          } else if (ev.keyCode === 32) {
              opt.togglePlay(ev);
          } else if (client && !ev.altKey && ev.keyCode === 75 && (ev.metaKey || ev.ctrlKey)) {
              ev.preventDefault();
              opt.commit(ev);
          }
      };
      var attach = function () {
          window.addEventListener('keydown', handler);
      };
      var detach = function () {
          window.removeEventListener('keydown', handler);
      };
      return {
          attach: attach,
          detach: detach
      };
  }

  var defaultUnits = 'mm';
  var data = [['postcard',101.6,152.4],['poster-small',280,430],['poster',460,610],
      ['poster-large',610,910],['business-card',50.8,88.9],['a0',841,1189],['a1',594,
      841],['a2',420,594],['a3',297,420],['a4',210,297],['a5',148,210],['a6',105,148],
      ['a7',74,105],['a8',52,74],['a9',37,52],['a10',26,37],['2a0',1189,1682],['4a0',
      1682,2378],['b0',1000,1414],['b1',707,1000],['b1+',720,1020],['b2',500,707],['b2+',
      520,720],['b3',353,500],['b4',250,353],['b5',176,250],['b6',125,176],['b7',88,
      125],['b8',62,88],['b9',44,62],['b10',31,44],['b11',22,32],['b12',16,22],['c0',
      917,1297],['c1',648,917],['c2',458,648],['c3',324,458],['c4',229,324],['c5',162,
      229],['c6',114,162],['c7',81,114],['c8',57,81],['c9',40,57],['c10',28,40],['c11',
      22,32],['c12',16,22],['half-letter',5.5,8.5,'in'],['letter',8.5,11,'in'],['legal',
      8.5,14,'in'],['junior-legal',5,8,'in'],['ledger',11,17,'in'],['tabloid',11,17,
      'in'],['ansi-a',8.5,11.0,'in'],['ansi-b',11.0,17.0,'in'],['ansi-c',17.0,22.0,
      'in'],['ansi-d',22.0,34.0,'in'],['ansi-e',34.0,44.0,'in'],['arch-a',9,12,'in'],
      ['arch-b',12,18,'in'],['arch-c',18,24,'in'],['arch-d',24,36,'in'],['arch-e',36,
      48,'in'],['arch-e1',30,42,'in'],['arch-e2',26,38,'in'],['arch-e3',27,39,'in']];
  var paperSizes = data.reduce(function (dict, preset) {
      var item = {
          units: preset[3] || defaultUnits,
          dimensions: [preset[1],preset[2]]
      };
      dict[preset[0]] = item;
      dict[preset[0].replace(/-/g, ' ')] = item;
      return dict;
  }, {})

  var availableUnits = ['px','m','cm','mm','in','km','ft'];
  function roundFractional(n) {
      return parseFloat(n.toFixed(4));
  }

  function inchesToPixels(inches, pixelsPerInch) {
      if ( pixelsPerInch === void 0 ) pixelsPerInch = 72;

      return Math.round(pixelsPerInch * inches);
  }

  function getDimensionsFromPreset(dimensions, unitsTo, pixelsPerInch) {
      if ( unitsTo === void 0 ) unitsTo = 'px';
      if ( pixelsPerInch === void 0 ) pixelsPerInch = 72;

      if (typeof dimensions === 'string') {
          var key = dimensions.toLowerCase();
          if (!(key in paperSizes)) {
              throw new Error(("The dimension preset \"" + dimensions + "\" is not supported or could not be found; try using a4, a3, postcard, letter, etc."));
          }
          var preset = paperSizes[key];
          return preset.dimensions.map(function (d) { return convertDistance(d, preset.units, unitsTo, pixelsPerInch); });
      } else {
          return dimensions;
      }
  }

  function convertDistance(dimension, unitsFrom, unitsTo, pixelsPerInch) {
      if ( unitsFrom === void 0 ) unitsFrom = 'px';
      if ( unitsTo === void 0 ) unitsTo = 'px';
      if ( pixelsPerInch === void 0 ) pixelsPerInch = 72;

      if (unitsFrom === unitsTo) 
          { return dimension; }
      if (unitsTo === 'px') {
          return toPixels(dimension, unitsFrom, pixelsPerInch);
      } else if (unitsFrom === 'px') {
          var inches = dimension * pixelsPerInch;
          return roundFractional(convertUnits(inches).from('in').to(unitsTo));
      }
      if (availableUnits.includes(unitsFrom) && availableUnits.includes(unitsTo)) {
          return roundFractional(convertUnits(dimension).from(unitsFrom).to(unitsTo));
      } else {
          throw new Error("Unsupported unit specified, try one of the following: m, cm, mm, in, ft");
      }
  }

  function toPixels(dimension, units, pixelsPerInch) {
      if ( pixelsPerInch === void 0 ) pixelsPerInch = 72;

      if (typeof units !== 'string') 
          { throw new Error("Invalid unit type, must be a string like 'cm' or 'in'"); }
      if (units === 'px') 
          { return dimension; }
      if (availableUnits.includes(units)) {
          var inches = convertUnits(dimension).from(units).to('in');
          return inchesToPixels(inches, pixelsPerInch);
      } else {
          throw new Error(("Unsupported unit " + units + ", try one of the following: m, cm, mm, in, ft"));
      }
  }

  function checkIfHasDimensions(settings) {
      if (!settings.dimensions) 
          { return false; }
      if (typeof settings.dimensions === 'string') 
          { return true; }
      if (Array.isArray(settings.dimensions) && settings.dimensions.length >= 2) 
          { return true; }
      return false;
  }

  function getParentSize(props, settings) {
      if (!isBrowser) {
          return [300,150];
      }
      var element = settings.parent || window;
      if (element === window || element === document || element === document.body) {
          return [window.innerWidth,window.innerHeight];
      } else {
          var ref = element.getBoundingClientRect();
          var width = ref.width;
          var height = ref.height;
          return [width,height];
      }
  }

  function resizeCanvas(props, settings) {
      var width, height;
      var styleWidth, styleHeight;
      var canvasWidth, canvasHeight;
      var dimensions = settings.dimensions;
      var hasDimensions = checkIfHasDimensions(settings);
      var exporting = props.exporting;
      var scaleToFit = hasDimensions ? settings.scaleToFit !== false : false;
      var scaleToView = !exporting && hasDimensions ? settings.scaleToView : true;
      var units = settings.units;
      var pixelsPerInch = typeof settings.pixelsPerInch === 'number' && isFinite(settings.pixelsPerInch) ? settings.pixelsPerInch : 72;
      var bleed = defined(settings.bleed, 0);
      var defaultPixelRatio = isBrowser() ? window.devicePixelRatio : 1;
      var pixelRatio = defined(settings.pixelRatio, defaultPixelRatio);
      if (typeof settings.maxPixelRatio === 'number') {
          pixelRatio = Math.min(settings.maxPixelRatio, pixelRatio);
      }
      if (!scaleToView) {
          pixelRatio = 1;
      }
      var ref = getParentSize(props, settings);
      var parentWidth = ref[0];
      var parentHeight = ref[1];
      var trimWidth, trimHeight;
      if (hasDimensions) {
          var result = getDimensionsFromPreset(dimensions, units, pixelsPerInch);
          var highest = Math.max(result[0], result[1]);
          var lowest = Math.min(result[0], result[1]);
          if (settings.orientation) {
              var landscape = settings.orientation === 'landscape';
              width = landscape ? highest : lowest;
              height = landscape ? lowest : highest;
          } else {
              width = result[0];
              height = result[1];
          }
          trimWidth = width;
          trimHeight = height;
          width += bleed * 2;
          height += bleed * 2;
      } else {
          width = parentWidth;
          height = parentHeight;
          trimWidth = width;
          trimHeight = height;
      }
      var realWidth = width;
      var realHeight = height;
      if (hasDimensions && units) {
          realWidth = convertDistance(width, units, 'px', pixelsPerInch);
          realHeight = convertDistance(height, units, 'px', pixelsPerInch);
      }
      styleWidth = Math.round(realWidth);
      styleHeight = Math.round(realHeight);
      if (scaleToFit && !exporting && hasDimensions) {
          var aspect = width / height;
          var windowAspect = parentWidth / parentHeight;
          var scaleToFitPadding = defined(settings.scaleToFitPadding, 40);
          var maxWidth = Math.round(parentWidth - scaleToFitPadding * 2);
          var maxHeight = Math.round(parentHeight - scaleToFitPadding * 2);
          if (styleWidth > maxWidth || styleHeight > maxHeight) {
              if (windowAspect > aspect) {
                  styleHeight = maxHeight;
                  styleWidth = Math.round(styleHeight * aspect);
              } else {
                  styleWidth = maxWidth;
                  styleHeight = Math.round(styleWidth / aspect);
              }
          }
      }
      var exportPixelRatio = 1;
      if (exporting) {
          exportPixelRatio = defined(settings.exportPixelRatio, hasDimensions ? 1 : pixelRatio);
          pixelRatio = exportPixelRatio;
      }
      canvasWidth = scaleToView ? Math.round(pixelRatio * styleWidth) : Math.round(exportPixelRatio * realWidth);
      canvasHeight = scaleToView ? Math.round(pixelRatio * styleHeight) : Math.round(exportPixelRatio * realHeight);
      var viewportWidth = scaleToView ? Math.round(styleWidth) : Math.round(realWidth);
      var viewportHeight = scaleToView ? Math.round(styleHeight) : Math.round(realHeight);
      var scaleX = canvasWidth / width;
      var scaleY = canvasHeight / height;
      return {
          bleed: bleed,
          pixelRatio: pixelRatio,
          width: width,
          height: height,
          dimensions: [width,height],
          units: units || 'px',
          scaleX: scaleX,
          scaleY: scaleY,
          viewportWidth: viewportWidth,
          viewportHeight: viewportHeight,
          canvasWidth: canvasWidth,
          canvasHeight: canvasHeight,
          trimWidth: trimWidth,
          trimHeight: trimHeight,
          styleWidth: styleWidth,
          styleHeight: styleHeight
      };
  }

  function createCanvasElement() {
      if (!isBrowser()) {
          throw new Error('It appears you are runing from Node.js or a non-browser environment. Try passing in an existing { canvas } interface instead.');
      }
      return document.createElement('canvas');
  }

  function createCanvas(settings) {
      if ( settings === void 0 ) settings = {};

      var context, canvas;
      if (settings.canvas !== false) {
          context = settings.context;
          if (!context || typeof context === 'string') {
              var newCanvas = settings.canvas || createCanvasElement();
              var type = context || '2d';
              context = getCanvasContext(type, assign({}, settings.attributes, {
                  canvas: newCanvas
              }));
              if (!context) {
                  throw new Error(("Failed at canvas.getContext('" + type + "') - the browser may not support this context, or a different context may already be in use with this canvas."));
              }
          }
          canvas = context.canvas;
          if (settings.canvas && canvas !== settings.canvas) {
              throw new Error('The { canvas } and { context } settings must point to the same underlying canvas element');
          }
          if (settings.pixelated) {
              context.imageSmoothingEnabled = false;
              context.mozImageSmoothingEnabled = false;
              context.oImageSmoothingEnabled = false;
              context.webkitImageSmoothingEnabled = false;
              context.msImageSmoothingEnabled = false;
              canvas.style['image-rendering'] = 'pixelated';
          }
      }
      return {
          canvas: canvas,
          context: context
      };
  }

  var SketchManager = function SketchManager() {
      var this$1 = this;

      this._settings = {};
      this._props = {};
      this._sketch = undefined;
      this._raf = null;
      this._lastRedrawResult = undefined;
      this._isP5Resizing = false;
      this._keyboardShortcuts = keyboardShortcuts({
          enabled: function () { return this$1.settings.hotkeys !== false; },
          save: function (ev) {
              if (ev.shiftKey) {
                  if (this$1.props.recording) {
                      this$1.endRecord();
                      this$1.play();
                  } else 
                      { this$1.record(); }
              } else 
                  { this$1.exportFrame(); }
          },
          togglePlay: function () {
              if (this$1.props.playing) 
                  { this$1.pause(); }
               else 
                  { this$1.play(); }
          },
          commit: function (ev) {
              this$1.exportFrame({
                  commit: true
              });
          }
      });
      this._animateHandler = (function () { return this$1.animate(); });
      this._resizeHandler = (function () {
          var changed = this$1.resize();
          if (changed) {
              this$1.render();
          }
      });
  };

  var prototypeAccessors = { sketch: { configurable: true },settings: { configurable: true },props: { configurable: true } };
  prototypeAccessors.sketch.get = function () {
      return this._sketch;
  };
  prototypeAccessors.settings.get = function () {
      return this._settings;
  };
  prototypeAccessors.props.get = function () {
      return this._props;
  };
  SketchManager.prototype._computePlayhead = function _computePlayhead (currentTime, duration) {
      var hasDuration = typeof duration === 'number' && isFinite(duration);
      return hasDuration ? currentTime / duration : 0;
  };
  SketchManager.prototype._computeFrame = function _computeFrame (playhead, time, totalFrames, fps) {
      return isFinite(totalFrames) && totalFrames > 1 ? Math.floor(playhead * (totalFrames - 1)) : Math.floor(fps * time);
  };
  SketchManager.prototype._computeCurrentFrame = function _computeCurrentFrame () {
      return this._computeFrame(this.props.playhead, this.props.time, this.props.totalFrames, this.props.fps);
  };
  SketchManager.prototype._getSizeProps = function _getSizeProps () {
      var props = this.props;
      return {
          width: props.width,
          height: props.height,
          pixelRatio: props.pixelRatio,
          canvasWidth: props.canvasWidth,
          canvasHeight: props.canvasHeight,
          viewportWidth: props.viewportWidth,
          viewportHeight: props.viewportHeight
      };
  };
  SketchManager.prototype.run = function run () {
      if (!this.sketch) 
          { throw new Error('should wait until sketch is loaded before trying to play()'); }
      if (this.settings.playing !== false) {
          this.play();
      }
      if (!this.props.started) {
          this._signalBegin();
          this.props.started = true;
      }
      this.tick();
      this.render();
  };
  SketchManager.prototype.play = function play () {
      var animate = this.settings.animate;
      if ('animation' in this.settings) {
          animate = true;
          console.warn('[canvas-sketch] { animation } has been renamed to { animate }');
      }
      if (!animate) 
          { return; }
      if (!isBrowser()) {
          console.error('[canvas-sketch] WARN: Using { animate } in Node.js is not yet supported');
          return;
      }
      if (!this.props.started) {
          this._signalBegin();
          this.props.started = true;
      }
      this.props.playing = true;
      if (this._raf != null) 
          { window.cancelAnimationFrame(this._raf); }
      this._lastTime = rightNow();
      this._raf = window.requestAnimationFrame(this._animateHandler);
  };
  SketchManager.prototype.pause = function pause () {
      if (this.props.recording) 
          { this.endRecord(); }
      this.props.playing = false;
      if (this._raf != null && isBrowser()) 
          { window.cancelAnimationFrame(this._raf); }
  };
  SketchManager.prototype.stop = function stop () {
      this.pause();
      this.props.frame = 0;
      this.props.playhead = 0;
      this.props.time = 0;
      this.props.deltaTime = 0;
      this.props.started = false;
      this.render();
  };
  SketchManager.prototype.record = function record () {
          var this$1 = this;

      if (this.props.recording) 
          { return; }
      if (!isBrowser()) {
          console.error('[canvas-sketch] WARN: Recording from Node.js is not yet supported');
          return;
      }
      this.stop();
      this.props.playing = true;
      this.props.recording = true;
      var frameInterval = 1 / this.props.fps;
      if (this._raf != null) 
          { window.cancelAnimationFrame(this._raf); }
      var tick = function () {
          if (!this$1.props.recording) 
              { return Promise.resolve(); }
          this$1.props.deltaTime = frameInterval;
          this$1.tick();
          return this$1.exportFrame({
              sequence: true
          }).then(function () {
              if (!this$1.props.recording) 
                  { return; }
              this$1.props.deltaTime = 0;
              this$1.props.frame++;
              if (this$1.props.frame < this$1.props.totalFrames) {
                  this$1.props.time += frameInterval;
                  this$1.props.playhead = this$1._computePlayhead(this$1.props.time, this$1.props.duration);
                  this$1._raf = window.requestAnimationFrame(tick);
              } else {
                  console.log('Finished recording');
                  this$1._signalEnd();
                  this$1.endRecord();
                  this$1.stop();
                  this$1.run();
              }
          });
      };
      if (!this.props.started) {
          this._signalBegin();
          this.props.started = true;
      }
      this._raf = window.requestAnimationFrame(tick);
  };
  SketchManager.prototype._signalBegin = function _signalBegin () {
          var this$1 = this;

      if (this.sketch && typeof this.sketch.begin === 'function') {
          this._wrapContextScale(function (props) { return this$1.sketch.begin(props); });
      }
  };
  SketchManager.prototype._signalEnd = function _signalEnd () {
          var this$1 = this;

      if (this.sketch && typeof this.sketch.end === 'function') {
          this._wrapContextScale(function (props) { return this$1.sketch.end(props); });
      }
  };
  SketchManager.prototype.endRecord = function endRecord () {
      if (this._raf != null && isBrowser()) 
          { window.cancelAnimationFrame(this._raf); }
      this.props.recording = false;
      this.props.deltaTime = 0;
  };
  SketchManager.prototype.exportFrame = function exportFrame (opt) {
          var this$1 = this;
          if ( opt === void 0 ) opt = {};

      if (!this.sketch) 
          { return Promise.all([]); }
      if (typeof this.sketch.preExport === 'function') {
          this.sketch.preExport();
      }
      var exportOpts = assign({
          sequence: opt.sequence,
          frame: opt.sequence ? this.props.frame : undefined,
          file: this.settings.file,
          name: this.settings.name,
          prefix: this.settings.prefix,
          suffix: this.settings.suffix,
          timeStamp: getFileName(),
          totalFrames: isFinite(this.props.totalFrames) ? Math.max(100, this.props.totalFrames) : 1000
      });
      var client = getClientAPI();
      var p = Promise.resolve();
      if (client && opt.commit && typeof client.commit === 'function') {
          var commitOpts = assign({}, exportOpts);
          var hash = client.commit(commitOpts);
          if (isPromise(hash)) 
              { p = hash; }
           else 
              { p = Promise.resolve(hash); }
      }
      return p.then(function (hash) { return this$1._doExportFrame(assign({}, exportOpts, {
          hash: hash || ''
      })); });
  };
  SketchManager.prototype._doExportFrame = function _doExportFrame (exportOpts) {
          var this$1 = this;
          if ( exportOpts === void 0 ) exportOpts = {};

      this._props.exporting = true;
      this.resize();
      var drawResult = this.render();
      var canvas = this.props.canvas;
      if (typeof drawResult === 'undefined') {
          drawResult = [canvas];
      }
      drawResult = [].concat(drawResult).filter(Boolean);
      drawResult = drawResult.map(function (result) {
          var hasDataObject = typeof result === 'object' && result && 'data' in result;
          var data = hasDataObject ? result.data : result;
          var opts = hasDataObject ? assign({}, result, {
              data: data
          }) : {
              data: data
          };
          if (isCanvas(data)) {
              return Object.assign(opts, {
                  url: data.toDataURL('image/png'),
                  extension: '.png',
                  type: 'image/png'
              });
          } else {
              return opts;
          }
      });
      this._props.exporting = false;
      this.resize();
      this.render();
      return Promise.all(drawResult.map(function (result, i, layerList) {
          var curOpt = assign({}, exportOpts, result, {
              layer: i,
              totalLayers: layerList.length
          });
          var data = result.data;
          if (result.url) {
              var url = result.url;
              delete curOpt.url;
              return saveDataURL(url, curOpt);
          } else {
              return saveFile(data, curOpt);
          }
      })).then(function (ev) {
          if (ev.length > 0) {
              var eventWithOutput = ev.find(function (e) { return e.outputName; });
              var isClient = ev.some(function (e) { return e.client; });
              var item;
              if (ev.length > 1) 
                  { item = ev.length; }
               else if (eventWithOutput) 
                  { item = (eventWithOutput.outputName) + "/" + (ev[0].filename); }
               else 
                  { item = "" + (ev[0].filename); }
              var ofSeq = '';
              if (exportOpts.sequence) {
                  var hasTotalFrames = isFinite(this$1.props.totalFrames);
                  ofSeq = hasTotalFrames ? (" (frame " + (exportOpts.frame + 1) + " / " + (this$1.props.totalFrames) + ")") : (" (frame " + (exportOpts.frame) + ")");
              } else if (ev.length > 1) {
                  ofSeq = " files";
              }
              var client = isClient ? 'canvas-sketch-cli' : 'canvas-sketch';
              console.log(("%c[" + client + "]%c Exported %c" + item + "%c" + ofSeq), 'color: #8e8e8e;', 'color: initial;', 'font-weight: bold;', 'font-weight: initial;');
          }
          if (typeof this$1.sketch.postExport === 'function') {
              this$1.sketch.postExport();
          }
      });
  };
  SketchManager.prototype._isAutoScale = function _isAutoScale () {
      return !this.props.gl && this.settings.scaleContext !== false;
  };
  SketchManager.prototype._wrapContextScale = function _wrapContextScale (cb) {
      this._preRender();
      cb(this.props);
      this._postRender();
  };
  SketchManager.prototype._preRender = function _preRender () {
      var props = this.props;
      var autoScale = this._isAutoScale();
      if (autoScale && props.context && !props.p5) {
          props.context.save();
          props.context.scale(props.scaleX, props.scaleY);
      } else if (props.p5) {
          props.p5.scale(props.scaleX / props.pixelRatio, props.scaleY / props.pixelRatio);
      }
  };
  SketchManager.prototype._postRender = function _postRender () {
      var props = this.props;
      var autoScale = this._isAutoScale();
      if (autoScale && props.context && !props.p5) {
          props.context.restore();
      }
      if (props.gl && this.settings.flush !== false && !props.p5) {
          props.gl.flush();
      }
  };
  SketchManager.prototype.tick = function tick () {
      if (this.sketch && typeof this.sketch.tick === 'function') {
          this._preRender();
          this.sketch.tick(this.props);
          this._postRender();
      }
  };
  SketchManager.prototype.render = function render () {
      if (this.props.p5) {
          this._lastRedrawResult = undefined;
          this.props.p5.redraw();
          return this._lastRedrawResult;
      } else {
          return this.submitDrawCall();
      }
  };
  SketchManager.prototype.submitDrawCall = function submitDrawCall () {
      if (!this.sketch) 
          { return; }
      var props = this.props;
      this._preRender();
      var drawResult;
      if (typeof this.sketch === 'function') {
          drawResult = this.sketch(props);
      } else if (typeof this.sketch.render === 'function') {
          drawResult = this.sketch.render(props);
      }
      this._postRender();
      return drawResult;
  };
  SketchManager.prototype.update = function update (opt) {
          var this$1 = this;
          if ( opt === void 0 ) opt = {};

      var notYetSupported = ['frame','time','duration','totalFrames','fps','playing',
          'animation'];
      Object.keys(opt).forEach(function (key) {
          if (notYetSupported.indexOf(key) >= 0) {
              throw new Error(("Sorry, the { " + key + " } option is not yet supported with update()."));
          }
      });
      var oldCanvas = this._settings.canvas;
      var oldContext = this._settings.context;
      for (var key in opt) {
          var value = opt[key];
          if (typeof value !== 'undefined') {
              this$1._settings[key] = value;
          }
      }
      if (oldCanvas !== this._settings.canvas || oldContext !== this._settings.context) {
          var ref = createCanvas(this._settings);
              var canvas = ref.canvas;
              var context = ref.context;
          this.props.canvas = canvas;
          this.props.context = context;
          this._setupGLKey();
          this._appendCanvasIfNeeded();
      }
      if (opt.p5 && typeof opt.p5 !== 'function') {
          this.props.p5 = opt.p5;
          this.props.p5.draw = (function () {
              if (this$1._isP5Resizing) 
                  { return; }
              this$1._lastRedrawResult = this$1.submitDrawCall();
          });
      }
      this.resize();
      this.render();
      return this.props;
  };
  SketchManager.prototype.resize = function resize () {
      var oldSizes = this._getSizeProps();
      var settings = this.settings;
      var props = this.props;
      var newProps = resizeCanvas(props, settings);
      Object.assign(this._props, newProps);
      var ref = this.props;
          var pixelRatio = ref.pixelRatio;
          var canvasWidth = ref.canvasWidth;
          var canvasHeight = ref.canvasHeight;
          var styleWidth = ref.styleWidth;
          var styleHeight = ref.styleHeight;
      var canvas = this.props.canvas;
      if (canvas && settings.resizeCanvas !== false) {
          if (props.p5) {
              if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {
                  this._isP5Resizing = true;
                  props.p5.pixelDensity(pixelRatio);
                  props.p5.resizeCanvas(canvasWidth / pixelRatio, canvasHeight / pixelRatio, false);
                  this._isP5Resizing = false;
              }
          } else {
              if (canvas.width !== canvasWidth) 
                  { canvas.width = canvasWidth; }
              if (canvas.height !== canvasHeight) 
                  { canvas.height = canvasHeight; }
          }
          if (isBrowser() && settings.styleCanvas !== false) {
              canvas.style.width = styleWidth + "px";
              canvas.style.height = styleHeight + "px";
          }
      }
      var newSizes = this._getSizeProps();
      var changed = !deepEqual(oldSizes, newSizes);
      if (changed) {
          this._sizeChanged();
      }
      return changed;
  };
  SketchManager.prototype._sizeChanged = function _sizeChanged () {
      if (this.sketch && typeof this.sketch.resize === 'function') {
          this.sketch.resize(this.props);
      }
  };
  SketchManager.prototype.animate = function animate () {
      if (!this.props.playing) 
          { return; }
      if (!isBrowser()) {
          console.error('[canvas-sketch] WARN: Animation in Node.js is not yet supported');
          return;
      }
      this._raf = window.requestAnimationFrame(this._animateHandler);
      var now = rightNow();
      var fps = this.props.fps;
      var frameIntervalMS = 1000 / fps;
      var deltaTimeMS = now - this._lastTime;
      var duration = this.props.duration;
      var hasDuration = typeof duration === 'number' && isFinite(duration);
      var isNewFrame = true;
      var playbackRate = this.settings.playbackRate;
      if (playbackRate === 'fixed') {
          deltaTimeMS = frameIntervalMS;
      } else if (playbackRate === 'throttle') {
          if (deltaTimeMS > frameIntervalMS) {
              now = now - deltaTimeMS % frameIntervalMS;
              this._lastTime = now;
          } else {
              isNewFrame = false;
          }
      } else {
          this._lastTime = now;
      }
      var deltaTime = deltaTimeMS / 1000;
      var newTime = this.props.time + deltaTime * this.props.timeScale;
      if (newTime < 0 && hasDuration) {
          newTime = duration + newTime;
      }
      var isFinished = false;
      var isLoopStart = false;
      var looping = this.settings.loop !== false;
      if (hasDuration && newTime >= duration) {
          if (looping) {
              isNewFrame = true;
              newTime = newTime % duration;
              isLoopStart = true;
          } else {
              isNewFrame = false;
              newTime = duration;
              isFinished = true;
          }
          this._signalEnd();
      }
      if (isNewFrame) {
          this.props.deltaTime = deltaTime;
          this.props.time = newTime;
          this.props.playhead = this._computePlayhead(newTime, duration);
          var lastFrame = this.props.frame;
          this.props.frame = this._computeCurrentFrame();
          if (isLoopStart) 
              { this._signalBegin(); }
          if (lastFrame !== this.props.frame) 
              { this.tick(); }
          this.render();
          this.props.deltaTime = 0;
      }
      if (isFinished) {
          this.pause();
      }
  };
  SketchManager.prototype.dispatch = function dispatch (cb) {
      if (typeof cb !== 'function') 
          { throw new Error('must pass function into dispatch()'); }
      cb(this.props);
      this.render();
  };
  SketchManager.prototype.mount = function mount () {
      this._appendCanvasIfNeeded();
  };
  SketchManager.prototype.unmount = function unmount () {
      if (isBrowser()) {
          window.removeEventListener('resize', this._resizeHandler);
          this._keyboardShortcuts.detach();
      }
  };
  SketchManager.prototype._appendCanvasIfNeeded = function _appendCanvasIfNeeded () {
      if (!isBrowser()) 
          { return; }
      if (this.props.canvas && !this.props.canvas.parentElement) {
          var defaultParent = this.settings.parent || document.body;
          defaultParent.appendChild(this.props.canvas);
      }
  };
  SketchManager.prototype._setupGLKey = function _setupGLKey () {
      if (this.props.context) {
          if (isWebGLContext(this.props.context)) {
              this._props.gl = this.props.context;
          } else {
              delete this._props.gl;
          }
      }
  };
  SketchManager.prototype.setup = function setup (settings) {
          var this$1 = this;
          if ( settings === void 0 ) settings = {};

      if (this.sketch) 
          { throw new Error('Multiple setup() calls not yet supported.'); }
      this._settings = Object.assign({}, settings, this._settings);
      var ref = createCanvas(this._settings);
          var context = ref.context;
          var canvas = ref.canvas;
      var duration = settings.duration;
      var totalFrames = settings.totalFrames;
      var timeScale = defined(settings.timeScale, 1);
      var fps = defined(settings.fps, 24);
      var hasDuration = typeof duration === 'number' && isFinite(duration);
      var hasTotalFrames = typeof totalFrames === 'number' && isFinite(totalFrames);
      var totalFramesFromDuration = hasDuration ? Math.floor(fps * duration) : undefined;
      var durationFromTotalFrames = hasTotalFrames ? totalFrames / fps : undefined;
      if (hasDuration && hasTotalFrames && totalFramesFromDuration !== totalFrames) {
          throw new Error('You should specify either duration or totalFrames, but not both. Or, they must match exactly.');
      }
      if (typeof settings.dimensions === 'undefined' && typeof settings.units !== 'undefined') {
          console.warn("You've specified a { units } setting but no { dimension }, so the units will be ignored.");
      }
      totalFrames = defined(totalFrames, totalFramesFromDuration, Infinity);
      duration = defined(duration, durationFromTotalFrames, Infinity);
      var startTime = settings.time;
      var startFrame = settings.frame;
      var hasStartTime = typeof startTime === 'number' && isFinite(startTime);
      var hasStartFrame = typeof startFrame === 'number' && isFinite(startFrame);
      var time = 0;
      var frame = 0;
      var playhead = 0;
      if (hasStartTime && hasStartFrame) {
          throw new Error('You should specify either start frame or time, but not both.');
      } else if (hasStartTime) {
          time = startTime;
          playhead = this._computePlayhead(time, duration);
          frame = this._computeFrame(playhead, time, totalFrames, fps);
      } else if (hasStartFrame) {
          frame = startFrame;
          time = frame / fps;
          playhead = this._computePlayhead(time, duration);
      }
      this._props = {
          canvas: canvas,
          context: context,
          fps: fps,
          frame: frame,
          time: time,
          deltaTime: 0,
          playhead: playhead,
          duration: duration,
          started: false,
          exporting: false,
          playing: false,
          recording: false,
          totalFrames: totalFrames,
          timeScale: timeScale,
          settings: this.settings,
          render: function () { return this$1.render(); },
          dispatch: function (cb) { return this$1.dispatch(cb); },
          reload: function () { return this$1.reload(); },
          tick: function () { return this$1.tick(); },
          resize: function () { return this$1.resize(); },
          update: function (opt) { return this$1.update(opt); },
          exportFrame: function (opt) { return this$1.exportFrame(opt); },
          record: function () { return this$1.record(); },
          play: function () { return this$1.play(); },
          pause: function () { return this$1.pause(); },
          stop: function () { return this$1.stop(); }
      };
      this._setupGLKey();
      this.resize();
  };
  SketchManager.prototype.loadAndRun = function loadAndRun (canvasSketch, newSettings) {
          var this$1 = this;

      return this.load(canvasSketch, newSettings).then(function () {
          this$1.run();
          return this$1;
      });
  };
  SketchManager.prototype.unload = function unload () {
          var this$1 = this;

      this.stop();
      if (!this.sketch) 
          { return; }
      if (typeof this.sketch.dispose === 'function') {
          this._wrapContextScale(function (props) { return this$1.sketch.dispose(props); });
      }
      this._sketch = null;
  };
  SketchManager.prototype.load = function load (createSketch, newSettings) {
          var this$1 = this;

      if (typeof createSketch !== 'function') {
          throw new Error('The function must take in a function as the first parameter. Example:\n  canvasSketcher(() => { ... }, settings)');
      }
      if (this.sketch) {
          this.unload();
      }
      if (typeof newSettings !== 'undefined') {
          this.update(newSettings);
      }
      this._preRender();
      var preload = Promise.resolve();
      if (this.settings.p5) {
          if (!isBrowser()) {
              throw new Error('[canvas-sketch] ERROR: Using p5.js in Node.js is not supported');
          }
          preload = new Promise(function (resolve) {
              var P5Constructor = this$1.settings.p5;
              var preload;
              if (P5Constructor.p5) {
                  preload = P5Constructor.preload;
                  P5Constructor = P5Constructor.p5;
              }
              var p5Sketch = function (p5) {
                  if (preload) 
                      { p5.preload = (function () { return preload(p5); }); }
                  p5.setup = (function () {
                      var props = this$1.props;
                      var isGL = this$1.settings.context === 'webgl';
                      var renderer = isGL ? p5.WEBGL : p5.P2D;
                      p5.noLoop();
                      p5.pixelDensity(props.pixelRatio);
                      p5.createCanvas(props.viewportWidth, props.viewportHeight, renderer);
                      if (isGL && this$1.settings.attributes) {
                          p5.setAttributes(this$1.settings.attributes);
                      }
                      this$1.update({
                          p5: p5,
                          canvas: p5.canvas,
                          context: p5._renderer.drawingContext
                      });
                      resolve();
                  });
              };
              if (typeof P5Constructor === 'function') {
                  new P5Constructor(p5Sketch);
              } else {
                  if (typeof window.createCanvas !== 'function') {
                      throw new Error("{ p5 } setting is passed but can't find p5.js in global (window) scope. Maybe you did not create it globally?\nnew p5(); // <-- attaches to global scope");
                  }
                  p5Sketch(window);
              }
          });
      }
      return preload.then(function () {
          var loader = createSketch(this$1.props);
          if (!isPromise(loader)) {
              loader = Promise.resolve(loader);
          }
          return loader;
      }).then(function (sketch) {
          if (!sketch) 
              { sketch = {}; }
          this$1._sketch = sketch;
          if (isBrowser()) {
              this$1._keyboardShortcuts.attach();
              window.addEventListener('resize', this$1._resizeHandler);
          }
          this$1._postRender();
          this$1._sizeChanged();
      }).catch(function (err) {
          console.warn('Could not start sketch, the async loading function rejected with an error:\n    Error: ' + err.message);
          throw err;
      });
  };

  Object.defineProperties( SketchManager.prototype, prototypeAccessors );

  function canvasSketch(sketch, settings) {
      if ( settings === void 0 ) settings = {};

      if (settings.p5) {
          if (settings.canvas || settings.context && typeof settings.context !== 'string') {
              throw new Error("In { p5 } mode, you can't pass your own canvas or context, unless the context is a \"webgl\" or \"2d\" string");
          }
          var context = typeof settings.context === 'string' ? settings.context : false;
          settings = Object.assign({}, settings, {
              canvas: false,
              context: context
          });
      }
      var manager = new SketchManager();
      if (sketch) {
          manager.setup(settings);
          manager.mount();
          return manager.loadAndRun(sketch);
      }
      return Promise.resolve(manager);
  }

  canvasSketch.canvasSketch = canvasSketch;
  canvasSketch.PaperSizes = paperSizes;

  return canvasSketch;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FudmFzLXNrZXRjaC51bWQuanMiLCJzb3VyY2VzIjpbIi4uL2xpYi91dGlsLmpzIiwiLi4vbGliL3NhdmUuanMiLCIuLi9saWIvY29yZS9rZXlib2FyZFNob3J0Y3V0cy5qcyIsIi4uL2xpYi9wYXBlci1zaXplcy5qcyIsIi4uL2xpYi9kaXN0YW5jZXMuanMiLCIuLi9saWIvY29yZS9yZXNpemVDYW52YXMuanMiLCIuLi9saWIvY29yZS9jcmVhdGVDYW52YXMuanMiLCIuLi9saWIvY29yZS9Ta2V0Y2hNYW5hZ2VyLmpzIiwiLi4vbGliL2NhbnZhcy1za2V0Y2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETzogV2UgY2FuIHJlbW92ZSBhIGh1Z2UgY2h1bmsgb2YgYnVuZGxlIHNpemUgYnkgdXNpbmcgYSBzbWFsbGVyXG4vLyB1dGlsaXR5IG1vZHVsZSBmb3IgY29udmVydGluZyB1bml0cy5cbmltcG9ydCBpc0RPTSBmcm9tICdpcy1kb20nO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xpZW50QVBJICgpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvd1snY2FudmFzLXNrZXRjaC1jbGknXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQnJvd3NlciAoKSB7XG4gIHJldHVybiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNXZWJHTENvbnRleHQgKGN0eCkge1xuICByZXR1cm4gdHlwZW9mIGN0eC5jbGVhciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgY3R4LmNsZWFyQ29sb3IgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGN0eC5idWZmZXJEYXRhID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDYW52YXMgKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGlzRE9NKGVsZW1lbnQpICYmIC9jYW52YXMvaS50ZXN0KGVsZW1lbnQubm9kZU5hbWUpICYmIHR5cGVvZiBlbGVtZW50LmdldENvbnRleHQgPT09ICdmdW5jdGlvbic7XG59XG4iLCJpbXBvcnQgZGF0ZWZvcm1hdCBmcm9tICdkYXRlZm9ybWF0JztcbmltcG9ydCBhc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XG5pbXBvcnQgcGFkTGVmdCBmcm9tICdwYWQtbGVmdCc7XG5pbXBvcnQgeyBnZXRDbGllbnRBUEkgfSBmcm9tICcuL3V0aWwnO1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG5sZXQgbGluaztcblxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVEYXRhVVJMIChkYXRhVVJJLCBvcHRzID0ge30pIHtcbiAgcmV0dXJuIHdpbmRvdy5mZXRjaChkYXRhVVJJKVxuICAgIC50aGVuKHJlcyA9PiByZXMuYmxvYigpKVxuICAgIC50aGVuKGJsb2IgPT4gc2F2ZUJsb2IoYmxvYiwgb3B0cykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2F2ZUJsb2IgKGJsb2IsIG9wdHMgPSB7fSkge1xuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgb3B0cyA9IGFzc2lnbih7IGV4dGVuc2lvbjogJycsIHByZWZpeDogJycsIHN1ZmZpeDogJycgfSwgb3B0cyk7XG4gICAgY29uc3QgZmlsZW5hbWUgPSByZXNvbHZlRmlsZW5hbWUob3B0cyk7XG5cbiAgICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnRBUEkoKTtcbiAgICBpZiAoY2xpZW50ICYmIHR5cGVvZiBjbGllbnQuc2F2ZUJsb2IgPT09ICdmdW5jdGlvbicgJiYgY2xpZW50Lm91dHB1dCkge1xuICAgICAgLy8gbmF0aXZlIHNhdmluZyB1c2luZyBhIENMSSB0b29sXG4gICAgICByZXR1cm4gY2xpZW50LnNhdmVCbG9iKGJsb2IsIGFzc2lnbih7fSwgb3B0cywgeyBmaWxlbmFtZSB9KSlcbiAgICAgICAgLnRoZW4oZXYgPT4gcmVzb2x2ZShldikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3JjZSBkb3dubG9hZFxuICAgICAgaWYgKCFsaW5rKSBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgbGluay5kb3dubG9hZCA9IGZpbGVuYW1lO1xuICAgICAgbGluay5ocmVmID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICBsaW5rLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIGxpbmsub25jbGljayA9IG5vb3A7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICAgIGxpbmsucmVtb3ZlQXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgICAgcmVzb2x2ZSh7IGZpbGVuYW1lLCBjbGllbnQ6IGZhbHNlIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICBsaW5rLmNsaWNrKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVGaWxlIChkYXRhLCBvcHRzID0ge30pIHtcbiAgY29uc3QgcGFydHMgPSBBcnJheS5pc0FycmF5KGRhdGEpID8gZGF0YSA6IFsgZGF0YSBdO1xuICBjb25zdCBibG9iID0gbmV3IHdpbmRvdy5CbG9iKHBhcnRzLCB7IHR5cGU6IG9wdHMudHlwZSB8fCAnJyB9KTtcbiAgcmV0dXJuIHNhdmVCbG9iKGJsb2IsIG9wdHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsZU5hbWUgKCkge1xuICBjb25zdCBkYXRlRm9ybWF0U3RyID0gYHl5eXkubW0uZGQtSEguTU0uc3NgO1xuICByZXR1cm4gZGF0ZWZvcm1hdChuZXcgRGF0ZSgpLCBkYXRlRm9ybWF0U3RyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRGaWxlIChwcmVmaXggPSAnJywgc3VmZml4ID0gJycsIGV4dCkge1xuICAvLyBjb25zdCBkYXRlRm9ybWF0U3RyID0gYHl5eXkubW0uZGQtSEguTU0uc3NgO1xuICBjb25zdCBkYXRlRm9ybWF0U3RyID0gYHl5eXktbW0tZGQgJ2F0JyBoLk1NLnNzIFRUYDtcbiAgcmV0dXJuIGAke3ByZWZpeH0ke2RhdGVmb3JtYXQobmV3IERhdGUoKSwgZGF0ZUZvcm1hdFN0cil9JHtzdWZmaXh9JHtleHR9YDtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUZpbGVuYW1lIChvcHQgPSB7fSkge1xuICBvcHQgPSBhc3NpZ24oe30sIG9wdCk7XG5cbiAgLy8gQ3VzdG9tIGZpbGVuYW1lIGZ1bmN0aW9uXG4gIGlmICh0eXBlb2Ygb3B0LmZpbGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb3B0LmZpbGUob3B0KTtcbiAgfSBlbHNlIGlmIChvcHQuZmlsZSkge1xuICAgIHJldHVybiBvcHQuZmlsZTtcbiAgfVxuXG4gIGxldCBmcmFtZSA9IG51bGw7XG4gIGxldCBleHRlbnNpb24gPSAnJztcbiAgaWYgKHR5cGVvZiBvcHQuZXh0ZW5zaW9uID09PSAnc3RyaW5nJykgZXh0ZW5zaW9uID0gb3B0LmV4dGVuc2lvbjtcblxuICBpZiAodHlwZW9mIG9wdC5mcmFtZSA9PT0gJ251bWJlcicpIHtcbiAgICBsZXQgdG90YWxGcmFtZXM7XG4gICAgaWYgKHR5cGVvZiBvcHQudG90YWxGcmFtZXMgPT09ICdudW1iZXInKSB7XG4gICAgICB0b3RhbEZyYW1lcyA9IG9wdC50b3RhbEZyYW1lcztcbiAgICB9IGVsc2Uge1xuICAgICAgdG90YWxGcmFtZXMgPSBNYXRoLm1heCgxMDAwLCBvcHQuZnJhbWUpO1xuICAgIH1cbiAgICBmcmFtZSA9IHBhZExlZnQoU3RyaW5nKG9wdC5mcmFtZSksIFN0cmluZyh0b3RhbEZyYW1lcykubGVuZ3RoLCAnMCcpO1xuICB9XG5cbiAgY29uc3QgbGF5ZXJTdHIgPSBpc0Zpbml0ZShvcHQudG90YWxMYXllcnMpICYmIGlzRmluaXRlKG9wdC5sYXllcikgJiYgb3B0LnRvdGFsTGF5ZXJzID4gMSA/IGAke29wdC5sYXllcn1gIDogJyc7XG4gIGlmIChmcmFtZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIFsgbGF5ZXJTdHIsIGZyYW1lIF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJy0nKSArIGV4dGVuc2lvbjtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBkZWZhdWx0RmlsZU5hbWUgPSBvcHQudGltZVN0YW1wO1xuICAgIHJldHVybiBbIG9wdC5wcmVmaXgsIG9wdC5uYW1lIHx8IGRlZmF1bHRGaWxlTmFtZSwgbGF5ZXJTdHIsIG9wdC5oYXNoLCBvcHQuc3VmZml4IF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJy0nKSArIGV4dGVuc2lvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0Q2xpZW50QVBJIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChvcHQgPSB7fSkge1xuICBjb25zdCBoYW5kbGVyID0gZXYgPT4ge1xuICAgIGlmICghb3B0LmVuYWJsZWQoKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50QVBJKCk7XG4gICAgaWYgKGV2LmtleUNvZGUgPT09IDgzICYmICFldi5hbHRLZXkgJiYgKGV2Lm1ldGFLZXkgfHwgZXYuY3RybEtleSkpIHtcbiAgICAgIC8vIENtZCArIFNcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBvcHQuc2F2ZShldik7XG4gICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09PSAzMikge1xuICAgICAgLy8gU3BhY2VcbiAgICAgIC8vIFRPRE86IHdoYXQgdG8gZG8gd2l0aCB0aGlzPyBrZWVwIGl0LCBvciByZW1vdmUgaXQ/XG4gICAgICBvcHQudG9nZ2xlUGxheShldik7XG4gICAgfSBlbHNlIGlmIChjbGllbnQgJiYgIWV2LmFsdEtleSAmJiBldi5rZXlDb2RlID09PSA3NSAmJiAoZXYubWV0YUtleSB8fCBldi5jdHJsS2V5KSkge1xuICAgICAgLy8gQ21kICsgSywgb25seSB3aGVuIGNhbnZhcy1za2V0Y2gtY2xpIGlzIHVzZWRcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBvcHQuY29tbWl0KGV2KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYXR0YWNoID0gKCkgPT4ge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlcik7XG4gIH07XG5cbiAgY29uc3QgZGV0YWNoID0gKCkgPT4ge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlcik7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBhdHRhY2gsXG4gICAgZGV0YWNoXG4gIH07XG59XG4iLCJjb25zdCBkZWZhdWx0VW5pdHMgPSAnbW0nO1xuXG5jb25zdCBkYXRhID0gW1xuICAvLyBDb21tb24gUGFwZXIgU2l6ZXNcbiAgLy8gKE1vc3RseSBOb3J0aC1BbWVyaWNhbiBiYXNlZClcbiAgWyAncG9zdGNhcmQnLCAxMDEuNiwgMTUyLjQgXSxcbiAgWyAncG9zdGVyLXNtYWxsJywgMjgwLCA0MzAgXSxcbiAgWyAncG9zdGVyJywgNDYwLCA2MTAgXSxcbiAgWyAncG9zdGVyLWxhcmdlJywgNjEwLCA5MTAgXSxcbiAgWyAnYnVzaW5lc3MtY2FyZCcsIDUwLjgsIDg4LjkgXSxcblxuICAvLyBTdGFuZGFyZCBQYXBlciBTaXplc1xuICBbICdhMCcsIDg0MSwgMTE4OSBdLFxuICBbICdhMScsIDU5NCwgODQxIF0sXG4gIFsgJ2EyJywgNDIwLCA1OTQgXSxcbiAgWyAnYTMnLCAyOTcsIDQyMCBdLFxuICBbICdhNCcsIDIxMCwgMjk3IF0sXG4gIFsgJ2E1JywgMTQ4LCAyMTAgXSxcbiAgWyAnYTYnLCAxMDUsIDE0OCBdLFxuICBbICdhNycsIDc0LCAxMDUgXSxcbiAgWyAnYTgnLCA1MiwgNzQgXSxcbiAgWyAnYTknLCAzNywgNTIgXSxcbiAgWyAnYTEwJywgMjYsIDM3IF0sXG4gIFsgJzJhMCcsIDExODksIDE2ODIgXSxcbiAgWyAnNGEwJywgMTY4MiwgMjM3OCBdLFxuICBbICdiMCcsIDEwMDAsIDE0MTQgXSxcbiAgWyAnYjEnLCA3MDcsIDEwMDAgXSxcbiAgWyAnYjErJywgNzIwLCAxMDIwIF0sXG4gIFsgJ2IyJywgNTAwLCA3MDcgXSxcbiAgWyAnYjIrJywgNTIwLCA3MjAgXSxcbiAgWyAnYjMnLCAzNTMsIDUwMCBdLFxuICBbICdiNCcsIDI1MCwgMzUzIF0sXG4gIFsgJ2I1JywgMTc2LCAyNTAgXSxcbiAgWyAnYjYnLCAxMjUsIDE3NiBdLFxuICBbICdiNycsIDg4LCAxMjUgXSxcbiAgWyAnYjgnLCA2MiwgODggXSxcbiAgWyAnYjknLCA0NCwgNjIgXSxcbiAgWyAnYjEwJywgMzEsIDQ0IF0sXG4gIFsgJ2IxMScsIDIyLCAzMiBdLFxuICBbICdiMTInLCAxNiwgMjIgXSxcbiAgWyAnYzAnLCA5MTcsIDEyOTcgXSxcbiAgWyAnYzEnLCA2NDgsIDkxNyBdLFxuICBbICdjMicsIDQ1OCwgNjQ4IF0sXG4gIFsgJ2MzJywgMzI0LCA0NTggXSxcbiAgWyAnYzQnLCAyMjksIDMyNCBdLFxuICBbICdjNScsIDE2MiwgMjI5IF0sXG4gIFsgJ2M2JywgMTE0LCAxNjIgXSxcbiAgWyAnYzcnLCA4MSwgMTE0IF0sXG4gIFsgJ2M4JywgNTcsIDgxIF0sXG4gIFsgJ2M5JywgNDAsIDU3IF0sXG4gIFsgJ2MxMCcsIDI4LCA0MCBdLFxuICBbICdjMTEnLCAyMiwgMzIgXSxcbiAgWyAnYzEyJywgMTYsIDIyIF0sXG5cbiAgLy8gVXNlIGluY2hlcyBmb3IgTm9ydGggQW1lcmljYW4gc2l6ZXMsXG4gIC8vIGFzIGl0IHByb2R1Y2VzIGxlc3MgZmxvYXQgcHJlY2lzaW9uIGVycm9yc1xuICBbICdoYWxmLWxldHRlcicsIDUuNSwgOC41LCAnaW4nIF0sXG4gIFsgJ2xldHRlcicsIDguNSwgMTEsICdpbicgXSxcbiAgWyAnbGVnYWwnLCA4LjUsIDE0LCAnaW4nIF0sXG4gIFsgJ2p1bmlvci1sZWdhbCcsIDUsIDgsICdpbicgXSxcbiAgWyAnbGVkZ2VyJywgMTEsIDE3LCAnaW4nIF0sXG4gIFsgJ3RhYmxvaWQnLCAxMSwgMTcsICdpbicgXSxcbiAgWyAnYW5zaS1hJywgOC41LCAxMS4wLCAnaW4nIF0sXG4gIFsgJ2Fuc2ktYicsIDExLjAsIDE3LjAsICdpbicgXSxcbiAgWyAnYW5zaS1jJywgMTcuMCwgMjIuMCwgJ2luJyBdLFxuICBbICdhbnNpLWQnLCAyMi4wLCAzNC4wLCAnaW4nIF0sXG4gIFsgJ2Fuc2ktZScsIDM0LjAsIDQ0LjAsICdpbicgXSxcbiAgWyAnYXJjaC1hJywgOSwgMTIsICdpbicgXSxcbiAgWyAnYXJjaC1iJywgMTIsIDE4LCAnaW4nIF0sXG4gIFsgJ2FyY2gtYycsIDE4LCAyNCwgJ2luJyBdLFxuICBbICdhcmNoLWQnLCAyNCwgMzYsICdpbicgXSxcbiAgWyAnYXJjaC1lJywgMzYsIDQ4LCAnaW4nIF0sXG4gIFsgJ2FyY2gtZTEnLCAzMCwgNDIsICdpbicgXSxcbiAgWyAnYXJjaC1lMicsIDI2LCAzOCwgJ2luJyBdLFxuICBbICdhcmNoLWUzJywgMjcsIDM5LCAnaW4nIF1cbl07XG5cbmV4cG9ydCBkZWZhdWx0IGRhdGEucmVkdWNlKChkaWN0LCBwcmVzZXQpID0+IHtcbiAgY29uc3QgaXRlbSA9IHtcbiAgICB1bml0czogcHJlc2V0WzNdIHx8IGRlZmF1bHRVbml0cyxcbiAgICBkaW1lbnNpb25zOiBbIHByZXNldFsxXSwgcHJlc2V0WzJdIF1cbiAgfTtcbiAgZGljdFtwcmVzZXRbMF1dID0gaXRlbTtcbiAgZGljdFtwcmVzZXRbMF0ucmVwbGFjZSgvLS9nLCAnICcpXSA9IGl0ZW07XG4gIHJldHVybiBkaWN0O1xufSwge30pO1xuIiwiaW1wb3J0IGNvbnZlcnRVbml0cyBmcm9tICdjb252ZXJ0LXVuaXRzJztcbmltcG9ydCBwYXBlclNpemVzIGZyb20gJy4vcGFwZXItc2l6ZXMnO1xuXG5jb25zdCBhdmFpbGFibGVVbml0cyA9IFsgJ3B4JywgJ20nLCAnY20nLCAnbW0nLCAnaW4nLCAna20nLCAnZnQnIF07XG5cbmZ1bmN0aW9uIHJvdW5kRnJhY3Rpb25hbCAobikge1xuICByZXR1cm4gcGFyc2VGbG9hdChuLnRvRml4ZWQoNCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5jaGVzVG9QaXhlbHMgKGluY2hlcywgcGl4ZWxzUGVySW5jaCA9IDcyKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHBpeGVsc1BlckluY2ggKiBpbmNoZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGltZW5zaW9uc0Zyb21QcmVzZXQgKGRpbWVuc2lvbnMsIHVuaXRzVG8gPSAncHgnLCBwaXhlbHNQZXJJbmNoID0gNzIpIHtcbiAgaWYgKHR5cGVvZiBkaW1lbnNpb25zID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGtleSA9IGRpbWVuc2lvbnMudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoIShrZXkgaW4gcGFwZXJTaXplcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGRpbWVuc2lvbiBwcmVzZXQgXCIke2RpbWVuc2lvbnN9XCIgaXMgbm90IHN1cHBvcnRlZCBvciBjb3VsZCBub3QgYmUgZm91bmQ7IHRyeSB1c2luZyBhNCwgYTMsIHBvc3RjYXJkLCBsZXR0ZXIsIGV0Yy5gKVxuICAgIH1cbiAgICBjb25zdCBwcmVzZXQgPSBwYXBlclNpemVzW2tleV07XG4gICAgcmV0dXJuIHByZXNldC5kaW1lbnNpb25zLm1hcChkID0+IHtcbiAgICAgIHJldHVybiBjb252ZXJ0RGlzdGFuY2UoZCwgcHJlc2V0LnVuaXRzLCB1bml0c1RvLCBwaXhlbHNQZXJJbmNoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGltZW5zaW9ucztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydERpc3RhbmNlIChkaW1lbnNpb24sIHVuaXRzRnJvbSA9ICdweCcsIHVuaXRzVG8gPSAncHgnLCBwaXhlbHNQZXJJbmNoID0gNzIpIHtcbiAgaWYgKHVuaXRzRnJvbSA9PT0gdW5pdHNUbykgcmV0dXJuIGRpbWVuc2lvbjtcblxuICBpZiAodW5pdHNUbyA9PT0gJ3B4Jykge1xuICAgIC8vIENvbnZlcnRpbmcgZGlzdGFuY2UgdG8gcGl4ZWxzLi4uXG4gICAgcmV0dXJuIHRvUGl4ZWxzKGRpbWVuc2lvbiwgdW5pdHNGcm9tLCBwaXhlbHNQZXJJbmNoKTtcbiAgfSBlbHNlIGlmICh1bml0c0Zyb20gPT09ICdweCcpIHtcbiAgICAvLyBDb252ZXJ0aW5nIHBpeGVscyB0byBkaXN0YW5jZS4uLlxuICAgIGNvbnN0IGluY2hlcyA9IGRpbWVuc2lvbiAqIHBpeGVsc1BlckluY2g7XG4gICAgcmV0dXJuIHJvdW5kRnJhY3Rpb25hbChjb252ZXJ0VW5pdHMoaW5jaGVzKS5mcm9tKCdpbicpLnRvKHVuaXRzVG8pKTtcbiAgfVxuXG4gIC8vIENvbnZlcnRpbmcgZnJvbSBtZWFzdXJlbWVudCB0byBhbm90aGVyIG1lYXN1cmVtZW50XG4gIGlmIChhdmFpbGFibGVVbml0cy5pbmNsdWRlcyh1bml0c0Zyb20pICYmIGF2YWlsYWJsZVVuaXRzLmluY2x1ZGVzKHVuaXRzVG8pKSB7XG4gICAgcmV0dXJuIHJvdW5kRnJhY3Rpb25hbChjb252ZXJ0VW5pdHMoZGltZW5zaW9uKS5mcm9tKHVuaXRzRnJvbSkudG8odW5pdHNUbykpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgdW5pdCBzcGVjaWZpZWQsIHRyeSBvbmUgb2YgdGhlIGZvbGxvd2luZzogbSwgY20sIG1tLCBpbiwgZnRgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9QaXhlbHMgKGRpbWVuc2lvbiwgdW5pdHMsIHBpeGVsc1BlckluY2ggPSA3Mikge1xuICBpZiAodHlwZW9mIHVuaXRzICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB1bml0IHR5cGUsIG11c3QgYmUgYSBzdHJpbmcgbGlrZSAnY20nIG9yICdpbidcIik7XG4gIGlmICh1bml0cyA9PT0gJ3B4JykgcmV0dXJuIGRpbWVuc2lvbjtcbiAgaWYgKGF2YWlsYWJsZVVuaXRzLmluY2x1ZGVzKHVuaXRzKSkge1xuICAgIGNvbnN0IGluY2hlcyA9IGNvbnZlcnRVbml0cyhkaW1lbnNpb24pLmZyb20odW5pdHMpLnRvKCdpbicpO1xuICAgIHJldHVybiBpbmNoZXNUb1BpeGVscyhpbmNoZXMsIHBpeGVsc1BlckluY2gpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgdW5pdCAke3VuaXRzfSwgdHJ5IG9uZSBvZiB0aGUgZm9sbG93aW5nOiBtLCBjbSwgbW0sIGluLCBmdGApO1xuICB9XG59XG4iLCJpbXBvcnQgZGVmaW5lZCBmcm9tICdkZWZpbmVkJztcbmltcG9ydCB7IGdldERpbWVuc2lvbnNGcm9tUHJlc2V0LCBjb252ZXJ0RGlzdGFuY2UgfSBmcm9tICcuLi9kaXN0YW5jZXMnO1xuaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmZ1bmN0aW9uIGNoZWNrSWZIYXNEaW1lbnNpb25zIChzZXR0aW5ncykge1xuICBpZiAoIXNldHRpbmdzLmRpbWVuc2lvbnMpIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBzZXR0aW5ncy5kaW1lbnNpb25zID09PSAnc3RyaW5nJykgcmV0dXJuIHRydWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHNldHRpbmdzLmRpbWVuc2lvbnMpICYmIHNldHRpbmdzLmRpbWVuc2lvbnMubGVuZ3RoID49IDIpIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudFNpemUgKHByb3BzLCBzZXR0aW5ncykge1xuICAvLyBXaGVuIG5vIHsgZGltZW5zaW9uIH0gaXMgcGFzc2VkIGluIG5vZGUsIHdlIGRlZmF1bHQgdG8gSFRNTCBjYW52YXMgc2l6ZVxuICBpZiAoIWlzQnJvd3Nlcikge1xuICAgIHJldHVybiBbIDMwMCwgMTUwIF07XG4gIH1cblxuICBsZXQgZWxlbWVudCA9IHNldHRpbmdzLnBhcmVudCB8fCB3aW5kb3c7XG5cbiAgaWYgKGVsZW1lbnQgPT09IHdpbmRvdyB8fFxuICAgICAgZWxlbWVudCA9PT0gZG9jdW1lbnQgfHxcbiAgICAgIGVsZW1lbnQgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICByZXR1cm4gWyB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0IF07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiBbIHdpZHRoLCBoZWlnaHQgXTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNpemVDYW52YXMgKHByb3BzLCBzZXR0aW5ncykge1xuICBsZXQgd2lkdGgsIGhlaWdodDtcbiAgbGV0IHN0eWxlV2lkdGgsIHN0eWxlSGVpZ2h0O1xuICBsZXQgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodDtcblxuICBjb25zdCBkaW1lbnNpb25zID0gc2V0dGluZ3MuZGltZW5zaW9ucztcbiAgY29uc3QgaGFzRGltZW5zaW9ucyA9IGNoZWNrSWZIYXNEaW1lbnNpb25zKHNldHRpbmdzKTtcbiAgY29uc3QgZXhwb3J0aW5nID0gcHJvcHMuZXhwb3J0aW5nO1xuICBjb25zdCBzY2FsZVRvRml0ID0gaGFzRGltZW5zaW9ucyA/IHNldHRpbmdzLnNjYWxlVG9GaXQgIT09IGZhbHNlIDogZmFsc2U7XG4gIGNvbnN0IHNjYWxlVG9WaWV3ID0gKCFleHBvcnRpbmcgJiYgaGFzRGltZW5zaW9ucykgPyBzZXR0aW5ncy5zY2FsZVRvVmlldyA6IHRydWU7XG4gIGNvbnN0IHVuaXRzID0gc2V0dGluZ3MudW5pdHM7XG4gIGNvbnN0IHBpeGVsc1BlckluY2ggPSAodHlwZW9mIHNldHRpbmdzLnBpeGVsc1BlckluY2ggPT09ICdudW1iZXInICYmIGlzRmluaXRlKHNldHRpbmdzLnBpeGVsc1BlckluY2gpKSA/IHNldHRpbmdzLnBpeGVsc1BlckluY2ggOiA3MjtcbiAgY29uc3QgYmxlZWQgPSBkZWZpbmVkKHNldHRpbmdzLmJsZWVkLCAwKTtcblxuICBjb25zdCBkZWZhdWx0UGl4ZWxSYXRpbyA9IGlzQnJvd3NlcigpID8gd2luZG93LmRldmljZVBpeGVsUmF0aW8gOiAxO1xuICBsZXQgcGl4ZWxSYXRpbyA9IGRlZmluZWQoc2V0dGluZ3MucGl4ZWxSYXRpbywgZGVmYXVsdFBpeGVsUmF0aW8pO1xuICBpZiAodHlwZW9mIHNldHRpbmdzLm1heFBpeGVsUmF0aW8gPT09ICdudW1iZXInKSB7XG4gICAgcGl4ZWxSYXRpbyA9IE1hdGgubWluKHNldHRpbmdzLm1heFBpeGVsUmF0aW8sIHBpeGVsUmF0aW8pO1xuICB9XG5cbiAgaWYgKCFzY2FsZVRvVmlldykge1xuICAgIHBpeGVsUmF0aW8gPSAxO1xuICB9XG5cbiAgLy8gcGFyZW50V2lkdGggPSB0eXBlb2YgcGFyZW50V2lkdGggPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdE5vZGVTaXplWzBdIDogcGFyZW50V2lkdGg7XG4gIC8vIHBhcmVudEhlaWdodCA9IHR5cGVvZiBwYXJlbnRIZWlnaHQgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdE5vZGVTaXplWzFdIDogcGFyZW50SGVpZ2h0O1xuXG4gIGxldCBbIHBhcmVudFdpZHRoLCBwYXJlbnRIZWlnaHQgXSA9IGdldFBhcmVudFNpemUocHJvcHMsIHNldHRpbmdzKTtcbiAgbGV0IHRyaW1XaWR0aCwgdHJpbUhlaWdodDtcblxuICAvLyBZb3UgY2FuIHNwZWNpZnkgYSBkaW1lbnNpb25zIGluIHBpeGVscyBvciBjbS9tL2luL2V0Y1xuICBpZiAoaGFzRGltZW5zaW9ucykge1xuICAgIGNvbnN0IHJlc3VsdCA9IGdldERpbWVuc2lvbnNGcm9tUHJlc2V0KGRpbWVuc2lvbnMsIHVuaXRzLCBwaXhlbHNQZXJJbmNoKTtcbiAgICBjb25zdCBoaWdoZXN0ID0gTWF0aC5tYXgocmVzdWx0WzBdLCByZXN1bHRbMV0pO1xuICAgIGNvbnN0IGxvd2VzdCA9IE1hdGgubWluKHJlc3VsdFswXSwgcmVzdWx0WzFdKTtcbiAgICBpZiAoc2V0dGluZ3Mub3JpZW50YXRpb24pIHtcbiAgICAgIGNvbnN0IGxhbmRzY2FwZSA9IHNldHRpbmdzLm9yaWVudGF0aW9uID09PSAnbGFuZHNjYXBlJztcbiAgICAgIHdpZHRoID0gbGFuZHNjYXBlID8gaGlnaGVzdCA6IGxvd2VzdDtcbiAgICAgIGhlaWdodCA9IGxhbmRzY2FwZSA/IGxvd2VzdCA6IGhpZ2hlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpZHRoID0gcmVzdWx0WzBdO1xuICAgICAgaGVpZ2h0ID0gcmVzdWx0WzFdO1xuICAgIH1cblxuICAgIHRyaW1XaWR0aCA9IHdpZHRoO1xuICAgIHRyaW1IZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAvLyBBcHBseSBibGVlZCB3aGljaCBpcyBhc3N1bWVkIHRvIGJlIGluIHRoZSBzYW1lIHVuaXRzXG4gICAgd2lkdGggKz0gYmxlZWQgKiAyO1xuICAgIGhlaWdodCArPSBibGVlZCAqIDI7XG4gIH0gZWxzZSB7XG4gICAgd2lkdGggPSBwYXJlbnRXaWR0aDtcbiAgICBoZWlnaHQgPSBwYXJlbnRIZWlnaHQ7XG4gICAgdHJpbVdpZHRoID0gd2lkdGg7XG4gICAgdHJpbUhlaWdodCA9IGhlaWdodDtcbiAgfVxuXG4gIC8vIFJlYWwgc2l6ZSBpbiBwaXhlbHMgYWZ0ZXIgUFBJIGlzIHRha2VuIGludG8gYWNjb3VudFxuICBsZXQgcmVhbFdpZHRoID0gd2lkdGg7XG4gIGxldCByZWFsSGVpZ2h0ID0gaGVpZ2h0O1xuICBpZiAoaGFzRGltZW5zaW9ucyAmJiB1bml0cykge1xuICAgIC8vIENvbnZlcnQgdG8gZGlnaXRhbC9waXhlbCB1bml0cyBpZiBuZWNlc3NhcnlcbiAgICByZWFsV2lkdGggPSBjb252ZXJ0RGlzdGFuY2Uod2lkdGgsIHVuaXRzLCAncHgnLCBwaXhlbHNQZXJJbmNoKTtcbiAgICByZWFsSGVpZ2h0ID0gY29udmVydERpc3RhbmNlKGhlaWdodCwgdW5pdHMsICdweCcsIHBpeGVsc1BlckluY2gpO1xuICB9XG5cbiAgLy8gSG93IGJpZyB0byBzZXQgdGhlICd2aWV3JyBvZiB0aGUgY2FudmFzIGluIHRoZSBicm93c2VyIChpLmUuIHN0eWxlKVxuICBzdHlsZVdpZHRoID0gTWF0aC5yb3VuZChyZWFsV2lkdGgpO1xuICBzdHlsZUhlaWdodCA9IE1hdGgucm91bmQocmVhbEhlaWdodCk7XG5cbiAgLy8gSWYgd2Ugd2lzaCB0byBzY2FsZSB0aGUgdmlldyB0byB0aGUgYnJvd3NlciB3aW5kb3dcbiAgaWYgKHNjYWxlVG9GaXQgJiYgIWV4cG9ydGluZyAmJiBoYXNEaW1lbnNpb25zKSB7XG4gICAgY29uc3QgYXNwZWN0ID0gd2lkdGggLyBoZWlnaHQ7XG4gICAgY29uc3Qgd2luZG93QXNwZWN0ID0gcGFyZW50V2lkdGggLyBwYXJlbnRIZWlnaHQ7XG4gICAgY29uc3Qgc2NhbGVUb0ZpdFBhZGRpbmcgPSBkZWZpbmVkKHNldHRpbmdzLnNjYWxlVG9GaXRQYWRkaW5nLCA0MCk7XG4gICAgY29uc3QgbWF4V2lkdGggPSBNYXRoLnJvdW5kKHBhcmVudFdpZHRoIC0gc2NhbGVUb0ZpdFBhZGRpbmcgKiAyKTtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSBNYXRoLnJvdW5kKHBhcmVudEhlaWdodCAtIHNjYWxlVG9GaXRQYWRkaW5nICogMik7XG4gICAgaWYgKHN0eWxlV2lkdGggPiBtYXhXaWR0aCB8fCBzdHlsZUhlaWdodCA+IG1heEhlaWdodCkge1xuICAgICAgaWYgKHdpbmRvd0FzcGVjdCA+IGFzcGVjdCkge1xuICAgICAgICBzdHlsZUhlaWdodCA9IG1heEhlaWdodDtcbiAgICAgICAgc3R5bGVXaWR0aCA9IE1hdGgucm91bmQoc3R5bGVIZWlnaHQgKiBhc3BlY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGVXaWR0aCA9IG1heFdpZHRoO1xuICAgICAgICBzdHlsZUhlaWdodCA9IE1hdGgucm91bmQoc3R5bGVXaWR0aCAvIGFzcGVjdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gZS5nLiBAMnggZXhwb3J0aW5nIGZvciBQTkcgc3ByaXRlc1xuICBsZXQgZXhwb3J0UGl4ZWxSYXRpbyA9IDE7XG4gIGlmIChleHBvcnRpbmcpIHtcbiAgICBleHBvcnRQaXhlbFJhdGlvID0gZGVmaW5lZChzZXR0aW5ncy5leHBvcnRQaXhlbFJhdGlvLCBoYXNEaW1lbnNpb25zID8gMSA6IHBpeGVsUmF0aW8pO1xuICAgIHBpeGVsUmF0aW8gPSBleHBvcnRQaXhlbFJhdGlvO1xuICB9XG5cbiAgY2FudmFzV2lkdGggPSBzY2FsZVRvVmlldyA/IE1hdGgucm91bmQocGl4ZWxSYXRpbyAqIHN0eWxlV2lkdGgpIDogTWF0aC5yb3VuZChleHBvcnRQaXhlbFJhdGlvICogcmVhbFdpZHRoKTtcbiAgY2FudmFzSGVpZ2h0ID0gc2NhbGVUb1ZpZXcgPyBNYXRoLnJvdW5kKHBpeGVsUmF0aW8gKiBzdHlsZUhlaWdodCkgOiBNYXRoLnJvdW5kKGV4cG9ydFBpeGVsUmF0aW8gKiByZWFsSGVpZ2h0KTtcblxuICBjb25zdCB2aWV3cG9ydFdpZHRoID0gc2NhbGVUb1ZpZXcgPyBNYXRoLnJvdW5kKHN0eWxlV2lkdGgpIDogTWF0aC5yb3VuZChyZWFsV2lkdGgpO1xuICBjb25zdCB2aWV3cG9ydEhlaWdodCA9IHNjYWxlVG9WaWV3ID8gTWF0aC5yb3VuZChzdHlsZUhlaWdodCkgOiBNYXRoLnJvdW5kKHJlYWxIZWlnaHQpO1xuXG4gIGNvbnN0IHNjYWxlWCA9IGNhbnZhc1dpZHRoIC8gd2lkdGg7XG4gIGNvbnN0IHNjYWxlWSA9IGNhbnZhc0hlaWdodCAvIGhlaWdodDtcblxuICAvLyBBc3NpZ24gdG8gY3VycmVudCBwcm9wc1xuICByZXR1cm4ge1xuICAgIGJsZWVkLFxuICAgIHBpeGVsUmF0aW8sXG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIGRpbWVuc2lvbnM6IFsgd2lkdGgsIGhlaWdodCBdLFxuICAgIHVuaXRzOiB1bml0cyB8fCAncHgnLFxuICAgIHNjYWxlWCxcbiAgICBzY2FsZVksXG4gICAgdmlld3BvcnRXaWR0aCxcbiAgICB2aWV3cG9ydEhlaWdodCxcbiAgICBjYW52YXNXaWR0aCxcbiAgICBjYW52YXNIZWlnaHQsXG4gICAgdHJpbVdpZHRoLFxuICAgIHRyaW1IZWlnaHQsXG4gICAgc3R5bGVXaWR0aCxcbiAgICBzdHlsZUhlaWdodFxuICB9O1xufVxuIiwiaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcbmltcG9ydCBnZXRDYW52YXNDb250ZXh0IGZyb20gJ2dldC1jYW52YXMtY29udGV4dCc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICcuLi91dGlsJztcblxuZnVuY3Rpb24gY3JlYXRlQ2FudmFzRWxlbWVudCAoKSB7XG4gIGlmICghaXNCcm93c2VyKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGFwcGVhcnMgeW91IGFyZSBydW5pbmcgZnJvbSBOb2RlLmpzIG9yIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQuIFRyeSBwYXNzaW5nIGluIGFuIGV4aXN0aW5nIHsgY2FudmFzIH0gaW50ZXJmYWNlIGluc3RlYWQuJyk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVDYW52YXMgKHNldHRpbmdzID0ge30pIHtcbiAgbGV0IGNvbnRleHQsIGNhbnZhcztcbiAgaWYgKHNldHRpbmdzLmNhbnZhcyAhPT0gZmFsc2UpIHtcbiAgICAvLyBEZXRlcm1pbmUgdGhlIGNhbnZhcyBhbmQgY29udGV4dCB0byBjcmVhdGVcbiAgICBjb250ZXh0ID0gc2V0dGluZ3MuY29udGV4dDtcbiAgICBpZiAoIWNvbnRleHQgfHwgdHlwZW9mIGNvbnRleHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBuZXdDYW52YXMgPSBzZXR0aW5ncy5jYW52YXMgfHwgY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgY29uc3QgdHlwZSA9IGNvbnRleHQgfHwgJzJkJztcbiAgICAgIGNvbnRleHQgPSBnZXRDYW52YXNDb250ZXh0KHR5cGUsIGFzc2lnbih7fSwgc2V0dGluZ3MuYXR0cmlidXRlcywgeyBjYW52YXM6IG5ld0NhbnZhcyB9KSk7XG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgYXQgY2FudmFzLmdldENvbnRleHQoJyR7dHlwZX0nKSAtIHRoZSBicm93c2VyIG1heSBub3Qgc3VwcG9ydCB0aGlzIGNvbnRleHQsIG9yIGEgZGlmZmVyZW50IGNvbnRleHQgbWF5IGFscmVhZHkgYmUgaW4gdXNlIHdpdGggdGhpcyBjYW52YXMuYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2FudmFzID0gY29udGV4dC5jYW52YXM7XG4gICAgLy8gRW5zdXJlIGNvbnRleHQgbWF0Y2hlcyB1c2VyJ3MgY2FudmFzIGV4cGVjdGF0aW9uc1xuICAgIGlmIChzZXR0aW5ncy5jYW52YXMgJiYgY2FudmFzICE9PSBzZXR0aW5ncy5jYW52YXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHsgY2FudmFzIH0gYW5kIHsgY29udGV4dCB9IHNldHRpbmdzIG11c3QgcG9pbnQgdG8gdGhlIHNhbWUgdW5kZXJseWluZyBjYW52YXMgZWxlbWVudCcpO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IHBpeGVsYXRpb24gdG8gY2FudmFzIGlmIG5lY2Vzc2FyeSwgdGhpcyBpcyBtb3N0bHkgYSBjb252ZW5pZW5jZSB1dGlsaXR5XG4gICAgaWYgKHNldHRpbmdzLnBpeGVsYXRlZCkge1xuICAgICAgY29udGV4dC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIGNvbnRleHQubW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICBjb250ZXh0Lm9JbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIGNvbnRleHQud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICBjb250ZXh0Lm1zSW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICBjYW52YXMuc3R5bGVbJ2ltYWdlLXJlbmRlcmluZyddID0gJ3BpeGVsYXRlZCc7XG4gICAgfVxuICB9XG4gIHJldHVybiB7IGNhbnZhcywgY29udGV4dCB9O1xufSIsImltcG9ydCBkZWZpbmVkIGZyb20gJ2RlZmluZWQnO1xuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcbmltcG9ydCByaWdodE5vdyBmcm9tICdyaWdodC1ub3cnO1xuaW1wb3J0IGlzUHJvbWlzZSBmcm9tICdpcy1wcm9taXNlJztcbmltcG9ydCB7IGlzQnJvd3NlciwgaXNXZWJHTENvbnRleHQsIGlzQ2FudmFzLCBnZXRDbGllbnRBUEkgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBkZWVwRXF1YWwgZnJvbSAnZGVlcC1lcXVhbCc7XG5pbXBvcnQgeyBzYXZlRmlsZSwgc2F2ZURhdGFVUkwsIGdldEZpbGVOYW1lIH0gZnJvbSAnLi4vc2F2ZSc7XG5cbmltcG9ydCBrZXlib2FyZFNob3J0Y3V0cyBmcm9tICcuL2tleWJvYXJkU2hvcnRjdXRzJztcbmltcG9ydCByZXNpemVDYW52YXMgZnJvbSAnLi9yZXNpemVDYW52YXMnO1xuaW1wb3J0IGNyZWF0ZUNhbnZhcyBmcm9tICcuL2NyZWF0ZUNhbnZhcyc7XG5cbmNsYXNzIFNrZXRjaE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5fc2V0dGluZ3MgPSB7fTtcbiAgICB0aGlzLl9wcm9wcyA9IHt9O1xuICAgIHRoaXMuX3NrZXRjaCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yYWYgPSBudWxsO1xuXG4gICAgLy8gU29tZSBoYWNreSB0aGluZ3MgcmVxdWlyZWQgdG8gZ2V0IGFyb3VuZCBwNS5qcyBzdHJ1Y3R1cmVcbiAgICB0aGlzLl9sYXN0UmVkcmF3UmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2lzUDVSZXNpemluZyA9IGZhbHNlO1xuXG4gICAgdGhpcy5fa2V5Ym9hcmRTaG9ydGN1dHMgPSBrZXlib2FyZFNob3J0Y3V0cyh7XG4gICAgICBlbmFibGVkOiAoKSA9PiB0aGlzLnNldHRpbmdzLmhvdGtleXMgIT09IGZhbHNlLFxuICAgICAgc2F2ZTogKGV2KSA9PiB7XG4gICAgICAgIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICAgIGlmICh0aGlzLnByb3BzLnJlY29yZGluZykge1xuICAgICAgICAgICAgdGhpcy5lbmRSZWNvcmQoKTtcbiAgICAgICAgICAgIHRoaXMucGxheSgpO1xuICAgICAgICAgIH0gZWxzZSB0aGlzLnJlY29yZCgpO1xuICAgICAgICB9IGVsc2UgdGhpcy5leHBvcnRGcmFtZSgpO1xuICAgICAgfSxcbiAgICAgIHRvZ2dsZVBsYXk6ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucGxheWluZykgdGhpcy5wYXVzZSgpO1xuICAgICAgICBlbHNlIHRoaXMucGxheSgpO1xuICAgICAgfSxcbiAgICAgIGNvbW1pdDogKGV2KSA9PiB7XG4gICAgICAgIHRoaXMuZXhwb3J0RnJhbWUoeyBjb21taXQ6IHRydWUgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLl9hbmltYXRlSGFuZGxlciA9ICgpID0+IHRoaXMuYW5pbWF0ZSgpO1xuXG4gICAgdGhpcy5fcmVzaXplSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLnJlc2l6ZSgpO1xuICAgICAgLy8gT25seSByZS1yZW5kZXIgd2hlbiBzaXplIGFjdHVhbGx5IGNoYW5nZXNcbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGdldCBza2V0Y2ggKCkge1xuICAgIHJldHVybiB0aGlzLl9za2V0Y2g7XG4gIH1cblxuICBnZXQgc2V0dGluZ3MgKCkge1xuICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncztcbiAgfVxuXG4gIGdldCBwcm9wcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BzO1xuICB9XG5cbiAgX2NvbXB1dGVQbGF5aGVhZCAoY3VycmVudFRpbWUsIGR1cmF0aW9uKSB7XG4gICAgY29uc3QgaGFzRHVyYXRpb24gPSB0eXBlb2YgZHVyYXRpb24gPT09ICdudW1iZXInICYmIGlzRmluaXRlKGR1cmF0aW9uKTtcbiAgICByZXR1cm4gaGFzRHVyYXRpb24gPyBjdXJyZW50VGltZSAvIGR1cmF0aW9uIDogMDtcbiAgfVxuXG4gIF9jb21wdXRlRnJhbWUgKHBsYXloZWFkLCB0aW1lLCB0b3RhbEZyYW1lcywgZnBzKSB7XG4gICAgcmV0dXJuIChpc0Zpbml0ZSh0b3RhbEZyYW1lcykgJiYgdG90YWxGcmFtZXMgPiAxKVxuICAgICAgPyBNYXRoLmZsb29yKHBsYXloZWFkICogKHRvdGFsRnJhbWVzIC0gMSkpXG4gICAgICA6IE1hdGguZmxvb3IoZnBzICogdGltZSk7XG4gIH1cblxuICBfY29tcHV0ZUN1cnJlbnRGcmFtZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbXB1dGVGcmFtZShcbiAgICAgIHRoaXMucHJvcHMucGxheWhlYWQsIHRoaXMucHJvcHMudGltZSxcbiAgICAgIHRoaXMucHJvcHMudG90YWxGcmFtZXMsIHRoaXMucHJvcHMuZnBzXG4gICAgKTtcbiAgfVxuXG4gIF9nZXRTaXplUHJvcHMgKCkge1xuICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IHByb3BzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBwcm9wcy5oZWlnaHQsXG4gICAgICBwaXhlbFJhdGlvOiBwcm9wcy5waXhlbFJhdGlvLFxuICAgICAgY2FudmFzV2lkdGg6IHByb3BzLmNhbnZhc1dpZHRoLFxuICAgICAgY2FudmFzSGVpZ2h0OiBwcm9wcy5jYW52YXNIZWlnaHQsXG4gICAgICB2aWV3cG9ydFdpZHRoOiBwcm9wcy52aWV3cG9ydFdpZHRoLFxuICAgICAgdmlld3BvcnRIZWlnaHQ6IHByb3BzLnZpZXdwb3J0SGVpZ2h0XG4gICAgfTtcbiAgfVxuXG4gIHJ1biAoKSB7XG4gICAgaWYgKCF0aGlzLnNrZXRjaCkgdGhyb3cgbmV3IEVycm9yKCdzaG91bGQgd2FpdCB1bnRpbCBza2V0Y2ggaXMgbG9hZGVkIGJlZm9yZSB0cnlpbmcgdG8gcGxheSgpJyk7XG5cbiAgICAvLyBTdGFydCBhbiBhbmltYXRpb24gZnJhbWUgbG9vcCBpZiBuZWNlc3NhcnlcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5wbGF5aW5nICE9PSBmYWxzZSkge1xuICAgICAgdGhpcy5wbGF5KCk7XG4gICAgfVxuXG4gICAgLy8gSW4gY2FzZSB3ZSBhcmVuJ3QgcGxheWluZyBvciBhbmltYXRlZCwgbWFrZSBzdXJlIHdlIHN0aWxsIHRyaWdnZXIgYmVnaW4gbWVzc2FnZS4uLlxuICAgIGlmICghdGhpcy5wcm9wcy5zdGFydGVkKSB7XG4gICAgICB0aGlzLl9zaWduYWxCZWdpbigpO1xuICAgICAgdGhpcy5wcm9wcy5zdGFydGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBSZW5kZXIgYW4gaW5pdGlhbCBmcmFtZVxuICAgIHRoaXMudGljaygpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBwbGF5ICgpIHtcbiAgICBsZXQgYW5pbWF0ZSA9IHRoaXMuc2V0dGluZ3MuYW5pbWF0ZTtcbiAgICBpZiAoJ2FuaW1hdGlvbicgaW4gdGhpcy5zZXR0aW5ncykge1xuICAgICAgYW5pbWF0ZSA9IHRydWU7XG4gICAgICBjb25zb2xlLndhcm4oJ1tjYW52YXMtc2tldGNoXSB7IGFuaW1hdGlvbiB9IGhhcyBiZWVuIHJlbmFtZWQgdG8geyBhbmltYXRlIH0nKTtcbiAgICB9XG4gICAgaWYgKCFhbmltYXRlKSByZXR1cm47XG4gICAgaWYgKCFpc0Jyb3dzZXIoKSkge1xuICAgICAgY29uc29sZS5lcnJvcignW2NhbnZhcy1za2V0Y2hdIFdBUk46IFVzaW5nIHsgYW5pbWF0ZSB9IGluIE5vZGUuanMgaXMgbm90IHlldCBzdXBwb3J0ZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnByb3BzLnN0YXJ0ZWQpIHtcbiAgICAgIHRoaXMuX3NpZ25hbEJlZ2luKCk7XG4gICAgICB0aGlzLnByb3BzLnN0YXJ0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBTdGFydCBhIHJlbmRlciBsb29wXG4gICAgdGhpcy5wcm9wcy5wbGF5aW5nID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5fcmFmICE9IG51bGwpIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9yYWYpO1xuICAgIHRoaXMuX2xhc3RUaW1lID0gcmlnaHROb3coKTtcbiAgICB0aGlzLl9yYWYgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGVIYW5kbGVyKTtcbiAgfVxuXG4gIHBhdXNlICgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5yZWNvcmRpbmcpIHRoaXMuZW5kUmVjb3JkKCk7XG4gICAgdGhpcy5wcm9wcy5wbGF5aW5nID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuX3JhZiAhPSBudWxsICYmIGlzQnJvd3NlcigpKSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fcmFmKTtcbiAgfVxuXG4gIC8vIFN0b3AgYW5kIHJlc2V0IHRvIGZyYW1lIHplcm9cbiAgc3RvcCAoKSB7XG4gICAgdGhpcy5wYXVzZSgpO1xuICAgIHRoaXMucHJvcHMuZnJhbWUgPSAwO1xuICAgIHRoaXMucHJvcHMucGxheWhlYWQgPSAwO1xuICAgIHRoaXMucHJvcHMudGltZSA9IDA7XG4gICAgdGhpcy5wcm9wcy5kZWx0YVRpbWUgPSAwO1xuICAgIHRoaXMucHJvcHMuc3RhcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICByZWNvcmQgKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnJlY29yZGluZykgcmV0dXJuO1xuICAgIGlmICghaXNCcm93c2VyKCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tjYW52YXMtc2tldGNoXSBXQVJOOiBSZWNvcmRpbmcgZnJvbSBOb2RlLmpzIGlzIG5vdCB5ZXQgc3VwcG9ydGVkJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3RvcCgpO1xuICAgIHRoaXMucHJvcHMucGxheWluZyA9IHRydWU7XG4gICAgdGhpcy5wcm9wcy5yZWNvcmRpbmcgPSB0cnVlO1xuXG4gICAgY29uc3QgZnJhbWVJbnRlcnZhbCA9IDEgLyB0aGlzLnByb3BzLmZwcztcbiAgICAvLyBSZW5kZXIgZWFjaCBmcmFtZSBpbiB0aGUgc2VxdWVuY2VcbiAgICBpZiAodGhpcy5fcmFmICE9IG51bGwpIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9yYWYpO1xuICAgIGNvbnN0IHRpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMucmVjb3JkaW5nKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB0aGlzLnByb3BzLmRlbHRhVGltZSA9IGZyYW1lSW50ZXJ2YWw7XG4gICAgICB0aGlzLnRpY2soKTtcbiAgICAgIHJldHVybiB0aGlzLmV4cG9ydEZyYW1lKHsgc2VxdWVuY2U6IHRydWUgfSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5yZWNvcmRpbmcpIHJldHVybjsgLy8gd2FzIGNhbmNlbGxlZCBiZWZvcmVcbiAgICAgICAgICB0aGlzLnByb3BzLmRlbHRhVGltZSA9IDA7XG4gICAgICAgICAgdGhpcy5wcm9wcy5mcmFtZSsrO1xuICAgICAgICAgIGlmICh0aGlzLnByb3BzLmZyYW1lIDwgdGhpcy5wcm9wcy50b3RhbEZyYW1lcykge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy50aW1lICs9IGZyYW1lSW50ZXJ2YWw7XG4gICAgICAgICAgICB0aGlzLnByb3BzLnBsYXloZWFkID0gdGhpcy5fY29tcHV0ZVBsYXloZWFkKHRoaXMucHJvcHMudGltZSwgdGhpcy5wcm9wcy5kdXJhdGlvbik7XG4gICAgICAgICAgICB0aGlzLl9yYWYgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRmluaXNoZWQgcmVjb3JkaW5nJyk7XG4gICAgICAgICAgICB0aGlzLl9zaWduYWxFbmQoKTtcbiAgICAgICAgICAgIHRoaXMuZW5kUmVjb3JkKCk7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgIHRoaXMucnVuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gVHJpZ2dlciBhIHN0YXJ0IGV2ZW50IGJlZm9yZSB3ZSBiZWdpbiByZWNvcmRpbmdcbiAgICBpZiAoIXRoaXMucHJvcHMuc3RhcnRlZCkge1xuICAgICAgdGhpcy5fc2lnbmFsQmVnaW4oKTtcbiAgICAgIHRoaXMucHJvcHMuc3RhcnRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5fcmFmID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aWNrKTtcbiAgfVxuXG4gIF9zaWduYWxCZWdpbiAoKSB7XG4gICAgaWYgKHRoaXMuc2tldGNoICYmIHR5cGVvZiB0aGlzLnNrZXRjaC5iZWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fd3JhcENvbnRleHRTY2FsZShwcm9wcyA9PiB0aGlzLnNrZXRjaC5iZWdpbihwcm9wcykpO1xuICAgIH1cbiAgfVxuXG4gIF9zaWduYWxFbmQgKCkge1xuICAgIGlmICh0aGlzLnNrZXRjaCAmJiB0eXBlb2YgdGhpcy5za2V0Y2guZW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl93cmFwQ29udGV4dFNjYWxlKHByb3BzID0+IHRoaXMuc2tldGNoLmVuZChwcm9wcykpO1xuICAgIH1cbiAgfVxuXG4gIGVuZFJlY29yZCAoKSB7XG4gICAgaWYgKHRoaXMuX3JhZiAhPSBudWxsICYmIGlzQnJvd3NlcigpKSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fcmFmKTtcbiAgICB0aGlzLnByb3BzLnJlY29yZGluZyA9IGZhbHNlO1xuICAgIHRoaXMucHJvcHMuZGVsdGFUaW1lID0gMDtcbiAgfVxuXG4gIGV4cG9ydEZyYW1lIChvcHQgPSB7fSkge1xuICAgIGlmICghdGhpcy5za2V0Y2gpIHJldHVybiBQcm9taXNlLmFsbChbXSk7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnNrZXRjaC5wcmVFeHBvcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuc2tldGNoLnByZUV4cG9ydCgpO1xuICAgIH1cblxuICAgIC8vIE9wdGlvbnMgZm9yIGV4cG9ydCBmdW5jdGlvblxuICAgIGxldCBleHBvcnRPcHRzID0gYXNzaWduKHtcbiAgICAgIHNlcXVlbmNlOiBvcHQuc2VxdWVuY2UsXG4gICAgICBmcmFtZTogb3B0LnNlcXVlbmNlID8gdGhpcy5wcm9wcy5mcmFtZSA6IHVuZGVmaW5lZCxcbiAgICAgIGZpbGU6IHRoaXMuc2V0dGluZ3MuZmlsZSxcbiAgICAgIG5hbWU6IHRoaXMuc2V0dGluZ3MubmFtZSxcbiAgICAgIHByZWZpeDogdGhpcy5zZXR0aW5ncy5wcmVmaXgsXG4gICAgICBzdWZmaXg6IHRoaXMuc2V0dGluZ3Muc3VmZml4LFxuICAgICAgdGltZVN0YW1wOiBnZXRGaWxlTmFtZSgpLFxuICAgICAgdG90YWxGcmFtZXM6IGlzRmluaXRlKHRoaXMucHJvcHMudG90YWxGcmFtZXMpID8gTWF0aC5tYXgoMTAwLCB0aGlzLnByb3BzLnRvdGFsRnJhbWVzKSA6IDEwMDBcbiAgICB9KTtcblxuICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudEFQSSgpO1xuICAgIGxldCBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgaWYgKGNsaWVudCAmJiBvcHQuY29tbWl0ICYmIHR5cGVvZiBjbGllbnQuY29tbWl0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCBjb21taXRPcHRzID0gYXNzaWduKHt9LCBleHBvcnRPcHRzKTtcbiAgICAgIGNvbnN0IGhhc2ggPSBjbGllbnQuY29tbWl0KGNvbW1pdE9wdHMpO1xuICAgICAgaWYgKGlzUHJvbWlzZShoYXNoKSkgcCA9IGhhc2g7XG4gICAgICBlbHNlIHAgPSBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHAudGhlbihoYXNoID0+IHtcbiAgICAgIHJldHVybiB0aGlzLl9kb0V4cG9ydEZyYW1lKGFzc2lnbih7fSwgZXhwb3J0T3B0cywgeyBoYXNoOiBoYXNoIHx8ICcnIH0pKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9kb0V4cG9ydEZyYW1lIChleHBvcnRPcHRzID0ge30pIHtcbiAgICB0aGlzLl9wcm9wcy5leHBvcnRpbmcgPSB0cnVlO1xuXG4gICAgLy8gUmVzaXplIHRvIG91dHB1dCByZXNvbHV0aW9uXG4gICAgdGhpcy5yZXNpemUoKTtcblxuICAgIC8vIERyYXcgYXQgdGhpcyBvdXRwdXQgcmVzb2x1dGlvblxuICAgIGxldCBkcmF3UmVzdWx0ID0gdGhpcy5yZW5kZXIoKTtcblxuICAgIC8vIFRoZSBzZWxmIG93bmVkIGNhbnZhcyAobWF5IGJlIHVuZGVmaW5lZC4uLiEpXG4gICAgY29uc3QgY2FudmFzID0gdGhpcy5wcm9wcy5jYW52YXM7XG5cbiAgICAvLyBHZXQgbGlzdCBvZiByZXN1bHRzIGZyb20gcmVuZGVyXG4gICAgaWYgKHR5cGVvZiBkcmF3UmVzdWx0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZHJhd1Jlc3VsdCA9IFsgY2FudmFzIF07XG4gICAgfVxuICAgIGRyYXdSZXN1bHQgPSBbXS5jb25jYXQoZHJhd1Jlc3VsdCkuZmlsdGVyKEJvb2xlYW4pO1xuXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBjYW52YXMvZmlsZSBkZXNjcmlwdG9ycyBpbnRvIGEgY29uc2lzdGVudCBmb3JtYXQsXG4gICAgLy8gYW5kIHB1bGwgb3V0IGFueSBkYXRhIFVSTHMgZnJvbSBjYW52YXMgZWxlbWVudHNcbiAgICBkcmF3UmVzdWx0ID0gZHJhd1Jlc3VsdC5tYXAocmVzdWx0ID0+IHtcbiAgICAgIGNvbnN0IGhhc0RhdGFPYmplY3QgPSB0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgJ2RhdGEnIGluIHJlc3VsdDtcbiAgICAgIGNvbnN0IGRhdGEgPSBoYXNEYXRhT2JqZWN0ID8gcmVzdWx0LmRhdGEgOiByZXN1bHQ7XG4gICAgICBjb25zdCBvcHRzID0gaGFzRGF0YU9iamVjdCA/IGFzc2lnbih7fSwgcmVzdWx0LCB7IGRhdGEgfSkgOiB7IGRhdGEgfTtcblxuICAgICAgaWYgKGlzQ2FudmFzKGRhdGEpKSB7XG4gICAgICAgIC8vIFByb3ZpZGUgZGF0YSBVUkwgaGludFxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihvcHRzLCB7IHVybDogZGF0YS50b0RhdGFVUkwoJ2ltYWdlL3BuZycpLCBleHRlbnNpb246ICcucG5nJywgdHlwZTogJ2ltYWdlL3BuZycgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb3B0cztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIE5vdyByZXR1cm4gdG8gcmVndWxhciByZW5kZXJpbmcgbW9kZVxuICAgIHRoaXMuX3Byb3BzLmV4cG9ydGluZyA9IGZhbHNlO1xuICAgIHRoaXMucmVzaXplKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcblxuICAgIC8vIEFuZCBub3cgd2UgY2FuIHNhdmUgZWFjaCByZXN1bHRcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoZHJhd1Jlc3VsdC5tYXAoKHJlc3VsdCwgaSwgbGF5ZXJMaXN0KSA9PiB7XG4gICAgICAvLyBCeSBkZWZhdWx0LCBpZiByZW5kZXJpbmcgbXVsdGlwbGUgbGF5ZXJzIHdlIHdpbGwgZ2l2ZSB0aGVtIGluZGljZXNcbiAgICAgIGNvbnN0IGN1ck9wdCA9IGFzc2lnbih7fSwgZXhwb3J0T3B0cywgcmVzdWx0LCB7IGxheWVyOiBpLCB0b3RhbExheWVyczogbGF5ZXJMaXN0Lmxlbmd0aCB9KTtcbiAgICAgIGNvbnN0IGRhdGEgPSByZXN1bHQuZGF0YTtcbiAgICAgIGlmIChyZXN1bHQudXJsKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IHJlc3VsdC51cmw7XG4gICAgICAgIGRlbGV0ZSBjdXJPcHQudXJsOyAvLyBhdm9pZCBzZW5kaW5nIGVudGlyZSBiYXNlNjQgZGF0YSBhcm91bmRcbiAgICAgICAgcmV0dXJuIHNhdmVEYXRhVVJMKHVybCwgY3VyT3B0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzYXZlRmlsZShkYXRhLCBjdXJPcHQpO1xuICAgICAgfVxuICAgIH0pKS50aGVuKGV2ID0+IHtcbiAgICAgIGlmIChldi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50V2l0aE91dHB1dCA9IGV2LmZpbmQoZSA9PiBlLm91dHB1dE5hbWUpO1xuICAgICAgICBjb25zdCBpc0NsaWVudCA9IGV2LnNvbWUoZSA9PiBlLmNsaWVudCk7XG4gICAgICAgIGxldCBpdGVtO1xuICAgICAgICAvLyBtYW55IGZpbGVzLCBqdXN0IGxvZyBob3cgbWFueSB3ZXJlIGV4cG9ydGVkXG4gICAgICAgIGlmIChldi5sZW5ndGggPiAxKSBpdGVtID0gZXYubGVuZ3RoO1xuICAgICAgICAvLyBpbiBDTEksIHdlIGtub3cgZXhhY3QgcGF0aCBkaXJuYW1lXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50V2l0aE91dHB1dCkgaXRlbSA9IGAke2V2ZW50V2l0aE91dHB1dC5vdXRwdXROYW1lfS8ke2V2WzBdLmZpbGVuYW1lfWA7XG4gICAgICAgIC8vIGluIGJyb3dzZXIsIHdlIGNhbiBvbmx5IGtub3cgaXQgd2VudCB0byBcImJyb3dzZXIgZG93bmxvYWQgZm9sZGVyXCJcbiAgICAgICAgZWxzZSBpdGVtID0gYCR7ZXZbMF0uZmlsZW5hbWV9YDtcbiAgICAgICAgbGV0IG9mU2VxID0gJyc7XG4gICAgICAgIGlmIChleHBvcnRPcHRzLnNlcXVlbmNlKSB7XG4gICAgICAgICAgY29uc3QgaGFzVG90YWxGcmFtZXMgPSBpc0Zpbml0ZSh0aGlzLnByb3BzLnRvdGFsRnJhbWVzKTtcbiAgICAgICAgICBvZlNlcSA9IGhhc1RvdGFsRnJhbWVzID8gYCAoZnJhbWUgJHtleHBvcnRPcHRzLmZyYW1lICsgMX0gLyAke3RoaXMucHJvcHMudG90YWxGcmFtZXN9KWAgOiBgIChmcmFtZSAke2V4cG9ydE9wdHMuZnJhbWV9KWA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXYubGVuZ3RoID4gMSkge1xuICAgICAgICAgIG9mU2VxID0gYCBmaWxlc2A7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2xpZW50ID0gaXNDbGllbnQgPyAnY2FudmFzLXNrZXRjaC1jbGknIDogJ2NhbnZhcy1za2V0Y2gnO1xuICAgICAgICBjb25zb2xlLmxvZyhgJWNbJHtjbGllbnR9XSVjIEV4cG9ydGVkICVjJHtpdGVtfSVjJHtvZlNlcX1gLCAnY29sb3I6ICM4ZThlOGU7JywgJ2NvbG9yOiBpbml0aWFsOycsICdmb250LXdlaWdodDogYm9sZDsnLCAnZm9udC13ZWlnaHQ6IGluaXRpYWw7Jyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRoaXMuc2tldGNoLnBvc3RFeHBvcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5za2V0Y2gucG9zdEV4cG9ydCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX2lzQXV0b1NjYWxlICgpIHtcbiAgICByZXR1cm4gIXRoaXMucHJvcHMuZ2wgJiYgdGhpcy5zZXR0aW5ncy5zY2FsZUNvbnRleHQgIT09IGZhbHNlO1xuICB9XG5cbiAgX3dyYXBDb250ZXh0U2NhbGUgKGNiKSB7XG4gICAgdGhpcy5fcHJlUmVuZGVyKCk7XG4gICAgY2IodGhpcy5wcm9wcyk7XG4gICAgdGhpcy5fcG9zdFJlbmRlcigpO1xuICB9XG5cbiAgX3ByZVJlbmRlciAoKSB7XG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGF1dG9TY2FsZSA9IHRoaXMuX2lzQXV0b1NjYWxlKCk7XG5cbiAgICAvLyBTY2FsZSBjb250ZXh0IGZvciB1bml0IHNpemluZ1xuICAgIGlmIChhdXRvU2NhbGUgJiYgcHJvcHMuY29udGV4dCAmJiAhcHJvcHMucDUpIHtcbiAgICAgIHByb3BzLmNvbnRleHQuc2F2ZSgpO1xuICAgICAgcHJvcHMuY29udGV4dC5zY2FsZShwcm9wcy5zY2FsZVgsIHByb3BzLnNjYWxlWSk7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5wNSkge1xuICAgICAgcHJvcHMucDUuc2NhbGUocHJvcHMuc2NhbGVYIC8gcHJvcHMucGl4ZWxSYXRpbywgcHJvcHMuc2NhbGVZIC8gcHJvcHMucGl4ZWxSYXRpbyk7XG4gICAgfVxuICB9XG5cbiAgX3Bvc3RSZW5kZXIgKCkge1xuICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBhdXRvU2NhbGUgPSB0aGlzLl9pc0F1dG9TY2FsZSgpO1xuXG4gICAgaWYgKGF1dG9TY2FsZSAmJiBwcm9wcy5jb250ZXh0ICYmICFwcm9wcy5wNSkge1xuICAgICAgcHJvcHMuY29udGV4dC5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgLy8gRmx1c2ggYnkgZGVmYXVsdCwgdGhpcyBtYXkgYmUgcmV2aXNpdGVkIGF0IGEgbGF0ZXIgcG9pbnQuXG4gICAgLy8gV2UgZG8gdGhpcyB0byBlbnN1cmUgdG9EYXRhVVJMIGNhbiBiZSBjYWxsZWQgaW1tZWRpYXRlbHkgYWZ0ZXIuXG4gICAgLy8gTW9zdCBsaWtlbHkgYnJvd3NlcnMgYWxyZWFkeSBoYW5kbGUgdGhpcywgc28gd2UgbWF5IHJldmlzaXQgdGhpcyBhbmRcbiAgICAvLyByZW1vdmUgaXQgaWYgaXQgaW1wcm92ZXMgcGVyZm9ybWFuY2Ugd2l0aG91dCBhbnkgdXNhYmlsaXR5IGlzc3Vlcy5cbiAgICBpZiAocHJvcHMuZ2wgJiYgdGhpcy5zZXR0aW5ncy5mbHVzaCAhPT0gZmFsc2UgJiYgIXByb3BzLnA1KSB7XG4gICAgICBwcm9wcy5nbC5mbHVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIHRpY2sgKCkge1xuICAgIGlmICh0aGlzLnNrZXRjaCAmJiB0eXBlb2YgdGhpcy5za2V0Y2gudGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fcHJlUmVuZGVyKCk7XG4gICAgICB0aGlzLnNrZXRjaC50aWNrKHRoaXMucHJvcHMpO1xuICAgICAgdGhpcy5fcG9zdFJlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMucDUpIHtcbiAgICAgIHRoaXMuX2xhc3RSZWRyYXdSZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnByb3BzLnA1LnJlZHJhdygpO1xuICAgICAgcmV0dXJuIHRoaXMuX2xhc3RSZWRyYXdSZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdERyYXdDYWxsKCk7XG4gICAgfVxuICB9XG5cbiAgc3VibWl0RHJhd0NhbGwgKCkge1xuICAgIGlmICghdGhpcy5za2V0Y2gpIHJldHVybjtcblxuICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcztcbiAgICB0aGlzLl9wcmVSZW5kZXIoKTtcblxuICAgIGxldCBkcmF3UmVzdWx0O1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLnNrZXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZHJhd1Jlc3VsdCA9IHRoaXMuc2tldGNoKHByb3BzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnNrZXRjaC5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRyYXdSZXN1bHQgPSB0aGlzLnNrZXRjaC5yZW5kZXIocHJvcHMpO1xuICAgIH1cblxuICAgIHRoaXMuX3Bvc3RSZW5kZXIoKTtcblxuICAgIHJldHVybiBkcmF3UmVzdWx0O1xuICB9XG5cbiAgdXBkYXRlIChvcHQgPSB7fSkge1xuICAgIC8vIEN1cnJlbnRseSB1cGRhdGUoKSBpcyBvbmx5IGZvY3VzZWQgb24gcmVzaXppbmcsXG4gICAgLy8gYnV0IGxhdGVyIHdlIHdpbGwgc3VwcG9ydCBvdGhlciBvcHRpb25zIGxpa2Ugc3dpdGNoaW5nXG4gICAgLy8gZnJhbWVzIGFuZCBzdWNoLlxuICAgIGNvbnN0IG5vdFlldFN1cHBvcnRlZCA9IFtcbiAgICAgICdmcmFtZScsICd0aW1lJywgJ2R1cmF0aW9uJyxcbiAgICAgICd0b3RhbEZyYW1lcycsICdmcHMnLCAncGxheWluZycsICdhbmltYXRpb24nXG4gICAgXTtcblxuICAgIE9iamVjdC5rZXlzKG9wdCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKG5vdFlldFN1cHBvcnRlZC5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNvcnJ5LCB0aGUgeyAke2tleX0gfSBvcHRpb24gaXMgbm90IHlldCBzdXBwb3J0ZWQgd2l0aCB1cGRhdGUoKS5gKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IG9sZENhbnZhcyA9IHRoaXMuX3NldHRpbmdzLmNhbnZhcztcbiAgICBjb25zdCBvbGRDb250ZXh0ID0gdGhpcy5fc2V0dGluZ3MuY29udGV4dDtcblxuICAgIC8vIE1lcmdlIG5ldyBvcHRpb25zIGludG8gc2V0dGluZ3NcbiAgICBmb3IgKGxldCBrZXkgaW4gb3B0KSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdFtrZXldO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHsgLy8gaWdub3JlIHVuZGVmaW5lZFxuICAgICAgICB0aGlzLl9zZXR0aW5nc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgZWl0aGVyIGNhbnZhcyBvciBjb250ZXh0IGlzIGNoYW5nZWQsIHdlIHNob3VsZCByZS11cGRhdGVcbiAgICBpZiAob2xkQ2FudmFzICE9PSB0aGlzLl9zZXR0aW5ncy5jYW52YXMgfHwgb2xkQ29udGV4dCAhPT0gdGhpcy5fc2V0dGluZ3MuY29udGV4dCkge1xuICAgICAgY29uc3QgeyBjYW52YXMsIGNvbnRleHQgfSA9IGNyZWF0ZUNhbnZhcyh0aGlzLl9zZXR0aW5ncyk7XG5cbiAgICAgIHRoaXMucHJvcHMuY2FudmFzID0gY2FudmFzO1xuICAgICAgdGhpcy5wcm9wcy5jb250ZXh0ID0gY29udGV4dDtcblxuICAgICAgLy8gRGVsZXRlIG9yIGFkZCBhICdnbCcgcHJvcCBmb3IgY29udmVuaWVuY2VcbiAgICAgIHRoaXMuX3NldHVwR0xLZXkoKTtcblxuICAgICAgLy8gUmUtbW91bnQgdGhlIG5ldyBjYW52YXMgaWYgaXQgaGFzIG5vIHBhcmVudFxuICAgICAgdGhpcy5fYXBwZW5kQ2FudmFzSWZOZWVkZWQoKTtcbiAgICB9XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gc3VwcG9ydCBQNS5qc1xuICAgIGlmIChvcHQucDUgJiYgdHlwZW9mIG9wdC5wNSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5wcm9wcy5wNSA9IG9wdC5wNTtcbiAgICAgIHRoaXMucHJvcHMucDUuZHJhdyA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX2lzUDVSZXNpemluZykgcmV0dXJuO1xuICAgICAgICB0aGlzLl9sYXN0UmVkcmF3UmVzdWx0ID0gdGhpcy5zdWJtaXREcmF3Q2FsbCgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBEcmF3IG5ldyBmcmFtZVxuICAgIHRoaXMucmVzaXplKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICByZXR1cm4gdGhpcy5wcm9wcztcbiAgfVxuXG4gIHJlc2l6ZSAoKSB7XG4gICAgY29uc3Qgb2xkU2l6ZXMgPSB0aGlzLl9nZXRTaXplUHJvcHMoKTtcblxuICAgIGNvbnN0IHNldHRpbmdzID0gdGhpcy5zZXR0aW5ncztcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyBSZWNvbXB1dGUgbmV3IHByb3BlcnRpZXMgYmFzZWQgb24gY3VycmVudCBzZXR1cFxuICAgIGNvbnN0IG5ld1Byb3BzID0gcmVzaXplQ2FudmFzKHByb3BzLCBzZXR0aW5ncyk7XG5cbiAgICAvLyBBc3NpZ24gdG8gY3VycmVudCBwcm9wc1xuICAgIE9iamVjdC5hc3NpZ24odGhpcy5fcHJvcHMsIG5ld1Byb3BzKTtcblxuICAgIC8vIE5vdyB3ZSBhY3R1YWxseSB1cGRhdGUgdGhlIGNhbnZhcyB3aWR0aC9oZWlnaHQgYW5kIHN0eWxlIHByb3BzXG4gICAgY29uc3Qge1xuICAgICAgcGl4ZWxSYXRpbyxcbiAgICAgIGNhbnZhc1dpZHRoLFxuICAgICAgY2FudmFzSGVpZ2h0LFxuICAgICAgc3R5bGVXaWR0aCxcbiAgICAgIHN0eWxlSGVpZ2h0XG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyBVcGRhdGUgY2FudmFzIHNldHRpbmdzXG4gICAgY29uc3QgY2FudmFzID0gdGhpcy5wcm9wcy5jYW52YXM7XG4gICAgaWYgKGNhbnZhcyAmJiBzZXR0aW5ncy5yZXNpemVDYW52YXMgIT09IGZhbHNlKSB7XG4gICAgICBpZiAocHJvcHMucDUpIHtcbiAgICAgICAgLy8gUDUuanMgc3BlY2lmaWMgZWRnZSBjYXNlXG4gICAgICAgIGlmIChjYW52YXMud2lkdGggIT09IGNhbnZhc1dpZHRoIHx8IGNhbnZhcy5oZWlnaHQgIT09IGNhbnZhc0hlaWdodCkge1xuICAgICAgICAgIHRoaXMuX2lzUDVSZXNpemluZyA9IHRydWU7XG4gICAgICAgICAgLy8gVGhpcyBjYXVzZXMgYSByZS1kcmF3IDpcXCBzbyB3ZSBpZ25vcmUgZHJhd3MgaW4gdGhlIG1lYW4gdGltZS4uLiBzb3J0YSBoYWNreVxuICAgICAgICAgIHByb3BzLnA1LnBpeGVsRGVuc2l0eShwaXhlbFJhdGlvKTtcbiAgICAgICAgICBwcm9wcy5wNS5yZXNpemVDYW52YXMoY2FudmFzV2lkdGggLyBwaXhlbFJhdGlvLCBjYW52YXNIZWlnaHQgLyBwaXhlbFJhdGlvLCBmYWxzZSk7XG4gICAgICAgICAgdGhpcy5faXNQNVJlc2l6aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvcmNlIGNhbnZhcyBzaXplXG4gICAgICAgIGlmIChjYW52YXMud2lkdGggIT09IGNhbnZhc1dpZHRoKSBjYW52YXMud2lkdGggPSBjYW52YXNXaWR0aDtcbiAgICAgICAgaWYgKGNhbnZhcy5oZWlnaHQgIT09IGNhbnZhc0hlaWdodCkgY2FudmFzLmhlaWdodCA9IGNhbnZhc0hlaWdodDtcbiAgICAgIH1cbiAgICAgIC8vIFVwZGF0ZSBjYW52YXMgc3R5bGVcbiAgICAgIGlmIChpc0Jyb3dzZXIoKSAmJiBzZXR0aW5ncy5zdHlsZUNhbnZhcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gYCR7c3R5bGVXaWR0aH1weGA7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBgJHtzdHlsZUhlaWdodH1weGA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbmV3U2l6ZXMgPSB0aGlzLl9nZXRTaXplUHJvcHMoKTtcbiAgICBsZXQgY2hhbmdlZCA9ICFkZWVwRXF1YWwob2xkU2l6ZXMsIG5ld1NpemVzKTtcbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpcy5fc2l6ZUNoYW5nZWQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG4gIH1cblxuICBcbiAgX3NpemVDaGFuZ2VkICgpIHtcbiAgICAvLyBTZW5kIHJlc2l6ZSBldmVudCB0byBza2V0Y2hcbiAgICBpZiAodGhpcy5za2V0Y2ggJiYgdHlwZW9mIHRoaXMuc2tldGNoLnJlc2l6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5za2V0Y2gucmVzaXplKHRoaXMucHJvcHMpO1xuICAgIH1cbiAgfVxuXG4gIGFuaW1hdGUgKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5wbGF5aW5nKSByZXR1cm47XG4gICAgaWYgKCFpc0Jyb3dzZXIoKSkge1xuICAgICAgY29uc29sZS5lcnJvcignW2NhbnZhcy1za2V0Y2hdIFdBUk46IEFuaW1hdGlvbiBpbiBOb2RlLmpzIGlzIG5vdCB5ZXQgc3VwcG9ydGVkJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3JhZiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5fYW5pbWF0ZUhhbmRsZXIpO1xuXG4gICAgbGV0IG5vdyA9IHJpZ2h0Tm93KCk7XG5cbiAgICBjb25zdCBmcHMgPSB0aGlzLnByb3BzLmZwcztcbiAgICBjb25zdCBmcmFtZUludGVydmFsTVMgPSAxMDAwIC8gZnBzO1xuICAgIGxldCBkZWx0YVRpbWVNUyA9IG5vdyAtIHRoaXMuX2xhc3RUaW1lO1xuXG4gICAgY29uc3QgZHVyYXRpb24gPSB0aGlzLnByb3BzLmR1cmF0aW9uO1xuICAgIGNvbnN0IGhhc0R1cmF0aW9uID0gdHlwZW9mIGR1cmF0aW9uID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZShkdXJhdGlvbik7XG5cbiAgICBsZXQgaXNOZXdGcmFtZSA9IHRydWU7XG4gICAgY29uc3QgcGxheWJhY2tSYXRlID0gdGhpcy5zZXR0aW5ncy5wbGF5YmFja1JhdGU7XG4gICAgaWYgKHBsYXliYWNrUmF0ZSA9PT0gJ2ZpeGVkJykge1xuICAgICAgZGVsdGFUaW1lTVMgPSBmcmFtZUludGVydmFsTVM7XG4gICAgfSBlbHNlIGlmIChwbGF5YmFja1JhdGUgPT09ICd0aHJvdHRsZScpIHtcbiAgICAgIGlmIChkZWx0YVRpbWVNUyA+IGZyYW1lSW50ZXJ2YWxNUykge1xuICAgICAgICBub3cgPSBub3cgLSAoZGVsdGFUaW1lTVMgJSBmcmFtZUludGVydmFsTVMpO1xuICAgICAgICB0aGlzLl9sYXN0VGltZSA9IG5vdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlzTmV3RnJhbWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGFzdFRpbWUgPSBub3c7XG4gICAgfVxuXG4gICAgY29uc3QgZGVsdGFUaW1lID0gZGVsdGFUaW1lTVMgLyAxMDAwO1xuICAgIGxldCBuZXdUaW1lID0gdGhpcy5wcm9wcy50aW1lICsgZGVsdGFUaW1lICogdGhpcy5wcm9wcy50aW1lU2NhbGU7XG5cbiAgICAvLyBIYW5kbGUgcmV2ZXJzZSB0aW1lIHNjYWxlXG4gICAgaWYgKG5ld1RpbWUgPCAwICYmIGhhc0R1cmF0aW9uKSB7XG4gICAgICBuZXdUaW1lID0gZHVyYXRpb24gKyBuZXdUaW1lO1xuICAgIH1cblxuICAgIC8vIFJlLXN0YXJ0IGFuaW1hdGlvblxuICAgIGxldCBpc0ZpbmlzaGVkID0gZmFsc2U7XG4gICAgbGV0IGlzTG9vcFN0YXJ0ID0gZmFsc2U7XG5cbiAgICBjb25zdCBsb29waW5nID0gdGhpcy5zZXR0aW5ncy5sb29wICE9PSBmYWxzZTtcbiAgICBpZiAoaGFzRHVyYXRpb24gJiYgbmV3VGltZSA+PSBkdXJhdGlvbikge1xuICAgICAgLy8gUmUtc3RhcnQgYW5pbWF0aW9uXG4gICAgICBpZiAobG9vcGluZykge1xuICAgICAgICBpc05ld0ZyYW1lID0gdHJ1ZTtcbiAgICAgICAgbmV3VGltZSA9IG5ld1RpbWUgJSBkdXJhdGlvbjtcbiAgICAgICAgaXNMb29wU3RhcnQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXNOZXdGcmFtZSA9IGZhbHNlO1xuICAgICAgICBuZXdUaW1lID0gZHVyYXRpb247XG4gICAgICAgIGlzRmluaXNoZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zaWduYWxFbmQoKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOZXdGcmFtZSkge1xuICAgICAgdGhpcy5wcm9wcy5kZWx0YVRpbWUgPSBkZWx0YVRpbWU7XG4gICAgICB0aGlzLnByb3BzLnRpbWUgPSBuZXdUaW1lO1xuICAgICAgdGhpcy5wcm9wcy5wbGF5aGVhZCA9IHRoaXMuX2NvbXB1dGVQbGF5aGVhZChuZXdUaW1lLCBkdXJhdGlvbik7XG4gICAgICBjb25zdCBsYXN0RnJhbWUgPSB0aGlzLnByb3BzLmZyYW1lO1xuICAgICAgdGhpcy5wcm9wcy5mcmFtZSA9IHRoaXMuX2NvbXB1dGVDdXJyZW50RnJhbWUoKTtcbiAgICAgIGlmIChpc0xvb3BTdGFydCkgdGhpcy5fc2lnbmFsQmVnaW4oKTtcbiAgICAgIGlmIChsYXN0RnJhbWUgIT09IHRoaXMucHJvcHMuZnJhbWUpIHRoaXMudGljaygpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIHRoaXMucHJvcHMuZGVsdGFUaW1lID0gMDtcbiAgICB9XG5cbiAgICBpZiAoaXNGaW5pc2hlZCkge1xuICAgICAgdGhpcy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRpc3BhdGNoIChjYikge1xuICAgIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignbXVzdCBwYXNzIGZ1bmN0aW9uIGludG8gZGlzcGF0Y2goKScpO1xuICAgIGNiKHRoaXMucHJvcHMpO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBtb3VudCAoKSB7XG4gICAgdGhpcy5fYXBwZW5kQ2FudmFzSWZOZWVkZWQoKTtcbiAgfVxuXG4gIHVubW91bnQgKCkge1xuICAgIGlmIChpc0Jyb3dzZXIoKSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX3Jlc2l6ZUhhbmRsZXIpO1xuICAgICAgdGhpcy5fa2V5Ym9hcmRTaG9ydGN1dHMuZGV0YWNoKCk7XG4gICAgfVxuICB9XG5cbiAgX2FwcGVuZENhbnZhc0lmTmVlZGVkICgpIHtcbiAgICBpZiAoIWlzQnJvd3NlcigpKSByZXR1cm47XG4gICAgaWYgKHRoaXMucHJvcHMuY2FudmFzICYmICF0aGlzLnByb3BzLmNhbnZhcy5wYXJlbnRFbGVtZW50KSB7XG4gICAgICBjb25zdCBkZWZhdWx0UGFyZW50ID0gdGhpcy5zZXR0aW5ncy5wYXJlbnQgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgIGRlZmF1bHRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5wcm9wcy5jYW52YXMpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXR1cEdMS2V5ICgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5jb250ZXh0KSB7XG4gICAgICBpZiAoaXNXZWJHTENvbnRleHQodGhpcy5wcm9wcy5jb250ZXh0KSkge1xuICAgICAgICB0aGlzLl9wcm9wcy5nbCA9IHRoaXMucHJvcHMuY29udGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9wcm9wcy5nbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXR1cCAoc2V0dGluZ3MgPSB7fSkge1xuICAgIGlmICh0aGlzLnNrZXRjaCkgdGhyb3cgbmV3IEVycm9yKCdNdWx0aXBsZSBzZXR1cCgpIGNhbGxzIG5vdCB5ZXQgc3VwcG9ydGVkLicpO1xuXG4gICAgdGhpcy5fc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBzZXR0aW5ncywgdGhpcy5fc2V0dGluZ3MpO1xuXG4gICAgLy8gR2V0IGluaXRpYWwgY2FudmFzICYgY29udGV4dFxuICAgIGNvbnN0IHsgY29udGV4dCwgY2FudmFzIH0gPSBjcmVhdGVDYW52YXModGhpcy5fc2V0dGluZ3MpO1xuXG4gICAgLy8gR2V0IHRpbWluZyBkYXRhXG4gICAgbGV0IGR1cmF0aW9uID0gc2V0dGluZ3MuZHVyYXRpb247XG4gICAgbGV0IHRvdGFsRnJhbWVzID0gc2V0dGluZ3MudG90YWxGcmFtZXM7XG4gICAgY29uc3QgdGltZVNjYWxlID0gZGVmaW5lZChzZXR0aW5ncy50aW1lU2NhbGUsIDEpO1xuICAgIGNvbnN0IGZwcyA9IGRlZmluZWQoc2V0dGluZ3MuZnBzLCAyNCk7XG4gICAgY29uc3QgaGFzRHVyYXRpb24gPSB0eXBlb2YgZHVyYXRpb24gPT09ICdudW1iZXInICYmIGlzRmluaXRlKGR1cmF0aW9uKTtcbiAgICBjb25zdCBoYXNUb3RhbEZyYW1lcyA9IHR5cGVvZiB0b3RhbEZyYW1lcyA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodG90YWxGcmFtZXMpO1xuXG4gICAgY29uc3QgdG90YWxGcmFtZXNGcm9tRHVyYXRpb24gPSBoYXNEdXJhdGlvbiA/IE1hdGguZmxvb3IoZnBzICogZHVyYXRpb24pIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IGR1cmF0aW9uRnJvbVRvdGFsRnJhbWVzID0gaGFzVG90YWxGcmFtZXMgPyAodG90YWxGcmFtZXMgLyBmcHMpIDogdW5kZWZpbmVkO1xuICAgIGlmIChoYXNEdXJhdGlvbiAmJiBoYXNUb3RhbEZyYW1lcyAmJiB0b3RhbEZyYW1lc0Zyb21EdXJhdGlvbiAhPT0gdG90YWxGcmFtZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IHNob3VsZCBzcGVjaWZ5IGVpdGhlciBkdXJhdGlvbiBvciB0b3RhbEZyYW1lcywgYnV0IG5vdCBib3RoLiBPciwgdGhleSBtdXN0IG1hdGNoIGV4YWN0bHkuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5kaW1lbnNpb25zID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygc2V0dGluZ3MudW5pdHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFlvdSd2ZSBzcGVjaWZpZWQgYSB7IHVuaXRzIH0gc2V0dGluZyBidXQgbm8geyBkaW1lbnNpb24gfSwgc28gdGhlIHVuaXRzIHdpbGwgYmUgaWdub3JlZC5gKTtcbiAgICB9XG5cbiAgICB0b3RhbEZyYW1lcyA9IGRlZmluZWQodG90YWxGcmFtZXMsIHRvdGFsRnJhbWVzRnJvbUR1cmF0aW9uLCBJbmZpbml0eSk7XG4gICAgZHVyYXRpb24gPSBkZWZpbmVkKGR1cmF0aW9uLCBkdXJhdGlvbkZyb21Ub3RhbEZyYW1lcywgSW5maW5pdHkpO1xuXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gc2V0dGluZ3MudGltZTtcbiAgICBjb25zdCBzdGFydEZyYW1lID0gc2V0dGluZ3MuZnJhbWU7XG4gICAgY29uc3QgaGFzU3RhcnRUaW1lID0gdHlwZW9mIHN0YXJ0VGltZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUoc3RhcnRUaW1lKTtcbiAgICBjb25zdCBoYXNTdGFydEZyYW1lID0gdHlwZW9mIHN0YXJ0RnJhbWUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHN0YXJ0RnJhbWUpO1xuXG4gICAgLy8gc3RhcnQgYXQgemVybyB1bmxlc3MgdXNlciBzcGVjaWZpZXMgZnJhbWUgb3IgdGltZSAoYnV0IG5vdCBib3RoIG1pc21hdGNoZWQpXG4gICAgbGV0IHRpbWUgPSAwO1xuICAgIGxldCBmcmFtZSA9IDA7XG4gICAgbGV0IHBsYXloZWFkID0gMDtcbiAgICBpZiAoaGFzU3RhcnRUaW1lICYmIGhhc1N0YXJ0RnJhbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IHNob3VsZCBzcGVjaWZ5IGVpdGhlciBzdGFydCBmcmFtZSBvciB0aW1lLCBidXQgbm90IGJvdGguJyk7XG4gICAgfSBlbHNlIGlmIChoYXNTdGFydFRpbWUpIHtcbiAgICAgIC8vIFVzZXIgc3BlY2lmaWVzIHRpbWUsIHdlIGluZmVyIGZyYW1lcyBmcm9tIEZQU1xuICAgICAgdGltZSA9IHN0YXJ0VGltZTtcbiAgICAgIHBsYXloZWFkID0gdGhpcy5fY29tcHV0ZVBsYXloZWFkKHRpbWUsIGR1cmF0aW9uKTtcbiAgICAgIGZyYW1lID0gdGhpcy5fY29tcHV0ZUZyYW1lKFxuICAgICAgICBwbGF5aGVhZCwgdGltZSxcbiAgICAgICAgdG90YWxGcmFtZXMsIGZwc1xuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGhhc1N0YXJ0RnJhbWUpIHtcbiAgICAgIC8vIFVzZXIgc3BlY2lmaWVzIGZyYW1lIG51bWJlciwgd2UgaW5mZXIgdGltZSBmcm9tIEZQU1xuICAgICAgZnJhbWUgPSBzdGFydEZyYW1lO1xuICAgICAgdGltZSA9IGZyYW1lIC8gZnBzO1xuICAgICAgcGxheWhlYWQgPSB0aGlzLl9jb21wdXRlUGxheWhlYWQodGltZSwgZHVyYXRpb24pO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWwgcmVuZGVyIHN0YXRlIGZlYXR1cmVzXG4gICAgdGhpcy5fcHJvcHMgPSB7XG4gICAgICBjYW52YXMsXG4gICAgICBjb250ZXh0LFxuICAgICAgZnBzLFxuICAgICAgZnJhbWUsXG4gICAgICB0aW1lLFxuICAgICAgZGVsdGFUaW1lOiAwLFxuICAgICAgcGxheWhlYWQsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHN0YXJ0ZWQ6IGZhbHNlLFxuICAgICAgZXhwb3J0aW5nOiBmYWxzZSxcbiAgICAgIHBsYXlpbmc6IGZhbHNlLFxuICAgICAgcmVjb3JkaW5nOiBmYWxzZSxcbiAgICAgIHRvdGFsRnJhbWVzLFxuICAgICAgdGltZVNjYWxlLFxuICAgICAgc2V0dGluZ3M6IHRoaXMuc2V0dGluZ3MsXG5cbiAgICAgIC8vIEV4cG9ydCBzb21lIHNwZWNpZmljIGFjdGlvbnMgdG8gdGhlIHNrZXRjaFxuICAgICAgcmVuZGVyOiAoKSA9PiB0aGlzLnJlbmRlcigpLFxuICAgICAgZGlzcGF0Y2g6IChjYikgPT4gdGhpcy5kaXNwYXRjaChjYiksXG4gICAgICByZWxvYWQ6ICgpID0+IHRoaXMucmVsb2FkKCksXG4gICAgICB0aWNrOiAoKSA9PiB0aGlzLnRpY2soKSxcbiAgICAgIHJlc2l6ZTogKCkgPT4gdGhpcy5yZXNpemUoKSxcbiAgICAgIHVwZGF0ZTogKG9wdCkgPT4gdGhpcy51cGRhdGUob3B0KSxcbiAgICAgIGV4cG9ydEZyYW1lOiBvcHQgPT4gdGhpcy5leHBvcnRGcmFtZShvcHQpLFxuICAgICAgcmVjb3JkOiAoKSA9PiB0aGlzLnJlY29yZCgpLFxuICAgICAgcGxheTogKCkgPT4gdGhpcy5wbGF5KCksXG4gICAgICBwYXVzZTogKCkgPT4gdGhpcy5wYXVzZSgpLFxuICAgICAgc3RvcDogKCkgPT4gdGhpcy5zdG9wKClcbiAgICB9O1xuXG4gICAgLy8gRm9yIFdlYkdMIHNrZXRjaGVzLCBhIGdsIHZhcmlhYmxlIHJlYWRzIGEgYml0IGJldHRlclxuICAgIHRoaXMuX3NldHVwR0xLZXkoKTtcblxuICAgIC8vIFRyaWdnZXIgaW5pdGlhbCByZXNpemUgbm93IHNvIHRoYXQgY2FudmFzIGlzIGFscmVhZHkgc2l6ZWRcbiAgICAvLyBieSB0aGUgdGltZSB3ZSBsb2FkIHRoZSBza2V0Y2hcbiAgICB0aGlzLnJlc2l6ZSgpO1xuICB9XG5cbiAgbG9hZEFuZFJ1biAoY2FudmFzU2tldGNoLCBuZXdTZXR0aW5ncykge1xuICAgIHJldHVybiB0aGlzLmxvYWQoY2FudmFzU2tldGNoLCBuZXdTZXR0aW5ncykudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLnJ1bigpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSk7XG4gIH1cblxuICB1bmxvYWQgKCkge1xuICAgIHRoaXMuc3RvcCgpO1xuICAgIGlmICghdGhpcy5za2V0Y2gpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHRoaXMuc2tldGNoLmRpc3Bvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX3dyYXBDb250ZXh0U2NhbGUocHJvcHMgPT4gdGhpcy5za2V0Y2guZGlzcG9zZShwcm9wcykpO1xuICAgIH1cbiAgICB0aGlzLl9za2V0Y2ggPSBudWxsO1xuICB9XG5cbiAgbG9hZCAoY3JlYXRlU2tldGNoLCBuZXdTZXR0aW5ncykge1xuICAgIC8vIFVzZXIgZGlkbid0IHNwZWNpZnkgYSBmdW5jdGlvblxuICAgIGlmICh0eXBlb2YgY3JlYXRlU2tldGNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBmdW5jdGlvbiBtdXN0IHRha2UgaW4gYSBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyLiBFeGFtcGxlOlxcbiAgY2FudmFzU2tldGNoZXIoKCkgPT4geyAuLi4gfSwgc2V0dGluZ3MpJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2tldGNoKSB7XG4gICAgICB0aGlzLnVubG9hZCgpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmV3U2V0dGluZ3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLnVwZGF0ZShuZXdTZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIHRyaWNreSBjYXNlOyB3ZSBzZXQgdXAgdGhlIGF1dG8tc2NhbGluZyBoZXJlXG4gICAgLy8gaW4gY2FzZSB0aGUgdXNlciBkZWNpZGVzIHRvIHJlbmRlciBhbnl0aGluZyB0byB0aGUgY29udGV4dCAqYmVmb3JlKiB0aGVcbiAgICAvLyByZW5kZXIoKSBmdW5jdGlvbi4uLiBIb3dldmVyLCB1c2VycyBzaG91bGQgaW5zdGVhZCB1c2UgYmVnaW4oKSBmdW5jdGlvbiBmb3IgdGhhdC5cbiAgICB0aGlzLl9wcmVSZW5kZXIoKTtcblxuICAgIGxldCBwcmVsb2FkID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICAvLyBCZWNhdXNlIG9mIFA1LmpzJ3MgdW51c3VhbCBzdHJ1Y3R1cmUsIHdlIGhhdmUgdG8gZG8gYSBiaXQgb2ZcbiAgICAvLyBsaWJyYXJ5LXNwZWNpZmljIGNoYW5nZXMgdG8gc3VwcG9ydCBpdCBwcm9wZXJseS5cbiAgICBpZiAodGhpcy5zZXR0aW5ncy5wNSkge1xuICAgICAgaWYgKCFpc0Jyb3dzZXIoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tjYW52YXMtc2tldGNoXSBFUlJPUjogVXNpbmcgcDUuanMgaW4gTm9kZS5qcyBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG4gICAgICBwcmVsb2FkID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGxldCBQNUNvbnN0cnVjdG9yID0gdGhpcy5zZXR0aW5ncy5wNTtcbiAgICAgICAgbGV0IHByZWxvYWQ7XG4gICAgICAgIGlmIChQNUNvbnN0cnVjdG9yLnA1KSB7XG4gICAgICAgICAgcHJlbG9hZCA9IFA1Q29uc3RydWN0b3IucHJlbG9hZDtcbiAgICAgICAgICBQNUNvbnN0cnVjdG9yID0gUDVDb25zdHJ1Y3Rvci5wNTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBza2V0Y2ggc2V0dXA7IGRpc2FibGUgbG9vcCwgc2V0IHNpemluZywgZXRjLlxuICAgICAgICBjb25zdCBwNVNrZXRjaCA9IHA1ID0+IHtcbiAgICAgICAgICAvLyBIb29rIGluIHByZWxvYWQgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgaWYgKHByZWxvYWQpIHA1LnByZWxvYWQgPSAoKSA9PiBwcmVsb2FkKHA1KTtcbiAgICAgICAgICBwNS5zZXR1cCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIGNvbnN0IGlzR0wgPSB0aGlzLnNldHRpbmdzLmNvbnRleHQgPT09ICd3ZWJnbCc7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJlciA9IGlzR0wgPyBwNS5XRUJHTCA6IHA1LlAyRDtcbiAgICAgICAgICAgIHA1Lm5vTG9vcCgpO1xuICAgICAgICAgICAgcDUucGl4ZWxEZW5zaXR5KHByb3BzLnBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgcDUuY3JlYXRlQ2FudmFzKHByb3BzLnZpZXdwb3J0V2lkdGgsIHByb3BzLnZpZXdwb3J0SGVpZ2h0LCByZW5kZXJlcik7XG4gICAgICAgICAgICBpZiAoaXNHTCAmJiB0aGlzLnNldHRpbmdzLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgcDUuc2V0QXR0cmlidXRlcyh0aGlzLnNldHRpbmdzLmF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSh7IHA1LCBjYW52YXM6IHA1LmNhbnZhcywgY29udGV4dDogcDUuX3JlbmRlcmVyLmRyYXdpbmdDb250ZXh0IH0pO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gU3VwcG9ydCBnbG9iYWwgYW5kIGluc3RhbmNlIFA1LmpzIG1vZGVzXG4gICAgICAgIGlmICh0eXBlb2YgUDVDb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG5ldyBQNUNvbnN0cnVjdG9yKHA1U2tldGNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5jcmVhdGVDYW52YXMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInsgcDUgfSBzZXR0aW5nIGlzIHBhc3NlZCBidXQgY2FuJ3QgZmluZCBwNS5qcyBpbiBnbG9iYWwgKHdpbmRvdykgc2NvcGUuIE1heWJlIHlvdSBkaWQgbm90IGNyZWF0ZSBpdCBnbG9iYWxseT9cXG5uZXcgcDUoKTsgLy8gPC0tIGF0dGFjaGVzIHRvIGdsb2JhbCBzY29wZVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcDVTa2V0Y2god2luZG93KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWxvYWQudGhlbigoKSA9PiB7XG4gICAgICAvLyBMb2FkIHRoZSB1c2VyJ3Mgc2tldGNoXG4gICAgICBsZXQgbG9hZGVyID0gY3JlYXRlU2tldGNoKHRoaXMucHJvcHMpO1xuICAgICAgaWYgKCFpc1Byb21pc2UobG9hZGVyKSkge1xuICAgICAgICBsb2FkZXIgPSBQcm9taXNlLnJlc29sdmUobG9hZGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsb2FkZXI7XG4gICAgfSkudGhlbihza2V0Y2ggPT4ge1xuICAgICAgaWYgKCFza2V0Y2gpIHNrZXRjaCA9IHt9O1xuICAgICAgdGhpcy5fc2tldGNoID0gc2tldGNoO1xuXG4gICAgICAvLyBPbmNlIHRoZSBza2V0Y2ggaXMgbG9hZGVkIHdlIGNhbiBhZGQgdGhlIGV2ZW50c1xuICAgICAgaWYgKGlzQnJvd3NlcigpKSB7XG4gICAgICAgIHRoaXMuX2tleWJvYXJkU2hvcnRjdXRzLmF0dGFjaCgpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fcmVzaXplSGFuZGxlcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3Bvc3RSZW5kZXIoKTtcblxuICAgICAgLy8gVGhlIGluaXRpYWwgcmVzaXplKCkgaW4gdGhlIGNvbnN0cnVjdG9yIHdpbGwgbm90IGhhdmVcbiAgICAgIC8vIHRyaWdnZXJlZCBhIHJlc2l6ZSgpIGV2ZW50IG9uIHRoZSBza2V0Y2gsIHNpbmNlIGl0IHdhcyBiZWZvcmVcbiAgICAgIC8vIHRoZSBza2V0Y2ggd2FzIGxvYWRlZC4gU28gd2Ugc2VuZCB0aGUgc2lnbmFsIGhlcmUsIGFsbG93aW5nXG4gICAgICAvLyB1c2VycyB0byByZWFjdCB0byB0aGUgaW5pdGlhbCBzaXplIGJlZm9yZSBmaXJzdCByZW5kZXIuXG4gICAgICB0aGlzLl9zaXplQ2hhbmdlZCgpO1xuICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBzdGFydCBza2V0Y2gsIHRoZSBhc3luYyBsb2FkaW5nIGZ1bmN0aW9uIHJlamVjdGVkIHdpdGggYW4gZXJyb3I6XFxuICAgIEVycm9yOiAnICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNrZXRjaE1hbmFnZXI7XG4iLCJpbXBvcnQgU2tldGNoTWFuYWdlciBmcm9tICcuL2NvcmUvU2tldGNoTWFuYWdlcic7XG5pbXBvcnQgUGFwZXJTaXplcyBmcm9tICcuL3BhcGVyLXNpemVzJztcblxuZnVuY3Rpb24gY2FudmFzU2tldGNoIChza2V0Y2gsIHNldHRpbmdzID0ge30pIHtcbiAgaWYgKHNldHRpbmdzLnA1KSB7XG4gICAgaWYgKHNldHRpbmdzLmNhbnZhcyB8fCAoc2V0dGluZ3MuY29udGV4dCAmJiB0eXBlb2Ygc2V0dGluZ3MuY29udGV4dCAhPT0gJ3N0cmluZycpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEluIHsgcDUgfSBtb2RlLCB5b3UgY2FuJ3QgcGFzcyB5b3VyIG93biBjYW52YXMgb3IgY29udGV4dCwgdW5sZXNzIHRoZSBjb250ZXh0IGlzIGEgXCJ3ZWJnbFwiIG9yIFwiMmRcIiBzdHJpbmdgKTtcbiAgICB9XG5cbiAgICAvLyBEbyBub3QgY3JlYXRlIGEgY2FudmFzIG9uIHN0YXJ0dXAsIHNpbmNlIFA1LmpzIGRvZXMgdGhhdCBmb3IgdXNcbiAgICBjb25zdCBjb250ZXh0ID0gdHlwZW9mIHNldHRpbmdzLmNvbnRleHQgPT09ICdzdHJpbmcnID8gc2V0dGluZ3MuY29udGV4dCA6IGZhbHNlO1xuICAgIHNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgc2V0dGluZ3MsIHsgY2FudmFzOiBmYWxzZSwgY29udGV4dCB9KTtcbiAgfVxuXG4gIGNvbnN0IG1hbmFnZXIgPSBuZXcgU2tldGNoTWFuYWdlcigpO1xuICBpZiAoc2tldGNoKSB7XG4gICAgLy8gQXBwbHkgc2V0dGluZ3MgYW5kIGNyZWF0ZSBhIGNhbnZhc1xuICAgIG1hbmFnZXIuc2V0dXAoc2V0dGluZ3MpO1xuICAgIC8vIE1vdW50IHRoZSBza2V0Y2ggdG8gaXRzIHBhcmVudCBlbGVtZW50IChvciBkb2N1bWVudC5ib2R5KVxuICAgIG1hbmFnZXIubW91bnQoKTtcbiAgICAvLyBMb2FkIHRoZSBza2V0Y2hcbiAgICByZXR1cm4gbWFuYWdlci5sb2FkQW5kUnVuKHNrZXRjaCk7XG4gIH1cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtYW5hZ2VyKTtcbn1cblxuLy8gVE9ETzogRmlndXJlIG91dCBhIG5pY2Ugd2F5IHRvIGV4cG9ydCB0aGluZ3MuXG5jYW52YXNTa2V0Y2guY2FudmFzU2tldGNoID0gY2FudmFzU2tldGNoO1xuY2FudmFzU2tldGNoLlBhcGVyU2l6ZXMgPSBQYXBlclNpemVzO1xuXG5leHBvcnQgZGVmYXVsdCBjYW52YXNTa2V0Y2g7XG4iXSwibmFtZXMiOlsiY29uc3QiLCJsZXQiLCJ0aGlzIiwiUGFwZXJTaXplcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFJTyxTQUFTLGVBQWdCO01BQzlCLE9BQU8sT0FBTyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDLE1BQUEsQ0FBTzs7O0FBR2pELEVBQU8sU0FBUyxZQUFhO01BQzNCLE9BQU8sT0FBTyxRQUFQLEtBQW9COzs7QUFHN0IsRUFBTyxTQUFTLGVBQWdCLEtBQUs7TUFDbkMsT0FBTyxPQUFPLEdBQUEsQ0FBSSxLQUFYLEtBQXFCLFVBQXJCLElBQW1DLE9BQU8sR0FBQSxDQUFJLFVBQVgsS0FBMEIsVUFBN0QsSUFBMkUsT0FBTyxHQUFBLENBQUksVUFBWCxLQUEwQjs7O0FBRzlHLEVBQU8sU0FBUyxTQUFVLFNBQVM7TUFDakMs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
